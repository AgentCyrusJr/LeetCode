Given an 2D board, count how many different battleships are in it. The battleships are represented with 'X's, empty slots are represented with '.'s. You may assume the following rules:

You receive a valid board, made of only battleships or empty slots.
Battleships can only be placed horizontally or vertically. In other words, they can only be made of the shape 1xN (1 row, N columns) or Nx1 (N rows, 1 column).
At least one horizontal or vertical cell separates between two battleships - there are no adjacent battleships.
Example:
X..X
...X
...X
In the above board there are 2 battleships.
===========================codes======================
public class Solution {
    public int countBattleships(char[][] board) {
        int count = 0;
        for(int i = 0 ; i < board.length; i++){
        	for(int j = 0; j < board[i].length; j++){
        		if(board[i][j] == 'X'){
        			if(i == 0 && j == 0)
        				count++;
        			else if(i==0){
        				if(board[i][j-1] != 'X')
        					count++;
        			}
        			else if(j==0){
        				if(board[i-1][j] != 'X')
        					count++;
        			}
        			else{
        				if(board[i-1][j] != 'X' && board[i][j-1] != 'X')
        					count++;
        			}
        		}
        	}
        }
        return count;
    }
}
=================Python=================
class Solution(object):
    def countBattleships(self, board):
        count = 0
        
        l = len(board)
        if l == 0:
            return 0
        c = len(board[0])
        
        for i in range(0, l):
            for j in range(0,c):
                if board[i][j] == 'X':
                    if i-1<0 and j-1<0 :
                        count = count +1
                    elif j-1<0 and board[i-1][j] == '.':
                        count = count+1
                    elif i-1<0 and board[i][j-1] == '.':
                        count = count+1
                    elif board[i-1][j] == '.' and board[i][j-1] == '.':
                        count = count +1
        return count
        """
        :type board: List[List[str]]
        :rtype: int
=====================2017/10/30=================
class Solution {
    int count = 0;

    public int countBattleships(char[][] board) {
        int row = board.length;
        if(row == 0) return 0;
        int col = board[0].length;
        for(int i = 0; i<row; i++){
            for(int j = 0; j<col; j++){
                dfs(i, j, board);
            }
        }  
        return count;
    }
    
    public void dfs(int i, int j, char[][] board){
        if(board[i][j] == '.' || (board[i][j] == 'X' && hasNearbyX(i,j, board))){
            return;
        }else{
            count++;
        }
    }
    
    public boolean hasNearbyX(int i, int j, char[][] board){
        boolean hasX = false;
        if(i-1>=0 && board[i-1][j] == 'X') hasX = true;
        if(j-1>=0 && board[i][j-1] == 'X') hasX = true;
        return hasX;
    }
}
