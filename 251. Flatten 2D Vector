Implement an iterator to flatten a 2d vector.

For example,
Given 2d vector =

[
  [1,2],
  [3],
  [4,5,6]
]
By calling next repeatedly until hasNext returns false, the order of elements returned by next should be: [1,2,3,4,5,6].
=============codes=============
public class Vector2D implements Iterator<Integer> {
    
    int index;
    List<Integer> list;
    public Vector2D(List<List<Integer>> vec2d) {
        list = new ArrayList<Integer>();
        for(List<Integer> ll: vec2d){
            for(int i : ll){
                list.add(i);
            }
        }
        index = 0;
    }

    @Override
    public Integer next() {
        return list.get(index++);
        
    }

    @Override
    public boolean hasNext() {
        return index<list.size();
    }
}

/**
 * Your Vector2D object will be instantiated and called as such:
 * Vector2D i = new Vector2D(vec2d);
 * while (i.hasNext()) v[f()] = i.next();
 */

=============follow up==========
//by StefanPochmann
public class Vector2D {

    private Iterator<List<Integer>> i;
    private Iterator<Integer> j;

    public Vector2D(List<List<Integer>> vec2d) {
        i = vec2d.iterator();
    }

    public int next() {
        hasNext();
        return j.next();
    }

    public boolean hasNext() {
        while ((j == null || !j.hasNext()) && i.hasNext())
            j = i.next().iterator();
        return j != null && j.hasNext();
    }
}
