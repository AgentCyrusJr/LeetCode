You are given two linked lists representing two non-negative numbers. The digits are stored in reverse order and each of their nodes contain a single digit. Add the two numbers and return it as a linked list.

Input: (2 -> 4 -> 3) + (5 -> 6 -> 4)
Output: 7 -> 0 -> 8
================================================
loop thru each node, take care of the case where sum is greater or equal to 10
Time: O(N)
Space: O(N)
=======================codes====================
/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) { val = x; }
 * }
 */
class Solution {
    public ListNode addTwoNumbers(ListNode l1, ListNode l2) {
        ListNode dummy = new ListNode(-1);
        ListNode head = dummy;
        int greater_or_equal_to_ten = 0;
        
        while(l1 != null && l2 != null){
            int sum = l1.val + l2.val + greater_or_equal_to_ten;
            greater_or_equal_to_ten = sum/10;
            ListNode curr = new ListNode(sum%10);
            head.next = curr;
            head = curr;
            l1 = l1.next;
            l2 = l2.next;
        }
        
        while(l1 != null){
            int sum = l1.val + greater_or_equal_to_ten;
            if(sum < 10){
                l1.val+=greater_or_equal_to_ten;
                head.next = l1;
                greater_or_equal_to_ten = 0;
                break;
            }else{
                l1.val = 0;
                head.next = l1;
                head = l1;
            }
            l1 = l1.next;  
        }
        
        while(l2 != null){
            int sum = l2.val + greater_or_equal_to_ten;
            if(sum < 10){
                l2.val+=greater_or_equal_to_ten;
                head.next = l2;
                greater_or_equal_to_ten = 0;
                break;
            }else{
                l2.val = 0;
                head.next = l2;
                head = l2;
            }
            l2 = l2.next;  
        }
        
        if(greater_or_equal_to_ten == 1){
            head.next = new ListNode(1);
        }
        
        return dummy.next;
    }
}

===================================
//by potpie 
public class Solution {
    public ListNode addTwoNumbers(ListNode l1, ListNode l2) {
        ListNode c1 = l1;
        ListNode c2 = l2;
        ListNode sentinel = new ListNode(0);
        ListNode d = sentinel;
        int sum = 0;
        while (c1 != null || c2 != null) {
            sum /= 10;
            if (c1 != null) {
                sum += c1.val;
                c1 = c1.next;
            }
            if (c2 != null) {
                sum += c2.val;
                c2 = c2.next;
            }
            d.next = new ListNode(sum % 10);
            d = d.next;
        }
        if (sum / 10 == 1)
            d.next = new ListNode(1);
        return sentinel.next;
    }
}
