You are given two linked lists representing two non-negative numbers. The digits are stored in reverse order and each of their nodes contain a single digit. Add the two numbers and return it as a linked list.

Input: (2 -> 4 -> 3) + (5 -> 6 -> 4)
Output: 7 -> 0 -> 8

=======================codes====================
/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) { val = x; }
 * }
 */
public class Solution {
    public ListNode addTwoNumbers(ListNode l1, ListNode l2) {
		int digit = 0, sum = 0;
		ListNode ln = null;
    	ListNode current = new ListNode(0);
        while(l1 != null && l2 != null){
        	sum = l1.val + l2.val + digit;
        	if(sum >= 10){
        		sum = sum % 10;
        		digit=1;
        	}
        	else
        		digit = 0;
        	if(ln==null) { 
    			ln = new ListNode(sum);
    			current = ln;
    		}
    		else{
    			current.next = new ListNode(sum);
    			current = current.next;
    		}
        	l1 = l1.next;
        	l2 = l2.next;
        }
        if(l1 == null){
        	while(l2 != null){
        		sum = l2.val + digit;
	        	if(sum >= 10){
	        		sum = sum % 10;
	        		digit=1;
	        	}
	        	else
	        		digit = 0;
	        	current.next = new ListNode(sum);
				current = current.next;
				l2 = l2.next;
        	}	
        }
        else{
        	while(l1 != null){
        		sum = l1.val + digit;
	        	if(sum >= 10){
	        		sum = sum % 10;
	        		digit = 1;
	        	}
	        	else
	        		digit = 0;
	        	current.next = new ListNode(sum);
				current = current.next;
				l1 = l1.next;
        	}
        }
        if(digit == 1){
        	current.next = new ListNode(digit);
			current = current.next;
        }
    // 	this.show(ln);
    	return ln;
        
	}
}

===================================
//by potpie 
public class Solution {
    public ListNode addTwoNumbers(ListNode l1, ListNode l2) {
        ListNode c1 = l1;
        ListNode c2 = l2;
        ListNode sentinel = new ListNode(0);
        ListNode d = sentinel;
        int sum = 0;
        while (c1 != null || c2 != null) {
            sum /= 10;
            if (c1 != null) {
                sum += c1.val;
                c1 = c1.next;
            }
            if (c2 != null) {
                sum += c2.val;
                c2 = c2.next;
            }
            d.next = new ListNode(sum % 10);
            d = d.next;
        }
        if (sum / 10 == 1)
            d.next = new ListNode(1);
        return sentinel.next;
    }
}
