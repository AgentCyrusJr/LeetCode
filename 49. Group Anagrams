Given an array of strings, group anagrams together.

For example, given: ["eat", "tea", "tan", "ate", "nat", "bat"], 
Return:

[
  ["ate", "eat","tea"],
  ["nat","tan"],
  ["bat"]
]
=========codes==========
public class Solution {
    public List<List<String>> groupAnagrams(String[] strs) {
		List<List<String>> list = new ArrayList<List<String>>();
		List<String> word = new ArrayList<String>();
		HashMap<String, List<String>> group = new HashMap<String, List<String>>();
		for(String str : strs){
			char[] ch = str.toCharArray();
			Arrays.sort(ch);
			String s = new String(ch);
			if(group.containsKey(s)){
				word = group.get(s);
			}else{
				word = new ArrayList<String>();
			}
			word.add(str);
			group.put(s, word);
		}
		
		for(List<String> ll : group.values()){
			list.add(ll);
		}
		return list;
	}
}
=================
//by yellowstone

//instead of sort the string array at the beginning, I sorted the list of each hashmap bucket at the last step.
public List<List<String>> groupAnagrams(String[] strs) {
	if(strs==null || strs.length == 0){
		return new ArrayList<List<String>>();
	}
	HashMap<String, List<String>> map = new HashMap<String, List<String>>();
	//Arrays.sort(strs);
	for (String s:strs) {
		char[] ca = s.toCharArray();
		Arrays.sort(ca);
		String keyStr = String.valueOf(ca); //quick char[] to String
		if(!map.containsKey(keyStr))
			map.put(keyStr, new ArrayList<String>());
		map.get(keyStr).add(s);
	}
	
	for(String key: map.keySet()) {
		Collections.sort(map.get(key));
	}
	return new ArrayList<List<String>>(map.values());
}
