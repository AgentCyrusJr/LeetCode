On a 2 dimensional grid with R rows and C columns, we start at (r0, c0) facing east.

Here, the north-west corner of the grid is at the first row and column, and the south-east corner of the grid is at the last row and column.

Now, we walk in a clockwise spiral shape to visit every position in this grid. 

Whenever we would move outside the boundary of the grid, we continue our walk outside the grid (but may return to the grid boundary later.) 

Eventually, we reach all R * C spaces of the grid.

Return a list of coordinates representing the positions of the grid in the order they were visited.

Example 1:

Input: R = 1, C = 4, r0 = 0, c0 = 0
Output: [[0,0],[0,1],[0,2],[0,3]]

Example 2:

Input: R = 5, C = 6, r0 = 1, c0 = 4
Output: [[1,4],[1,5],[2,5],[2,4],[2,3],[1,3],[0,3],[0,4],[0,5],[3,5],[3,4],[3,3],[3,2],[2,2],[1,2],[0,2],[4,5],[4,4],[4,3],[4,2],[4,1],[3,1],[2,1],[1,1],[0,1],[4,0],[3,0],[2,0],[1,0],[0,0]]

Note:

1 <= R <= 100
1 <= C <= 100
0 <= r0 < R
0 <= c0 < C
====================================================
we observe the steps it moves toward the same directory increases as 1, 1, 2, 2, 3, 3, ...

we have a step counter to decide when to change the direction

Time: O(R*C)
Space: O(R*C)
======================code==========================
class Solution {
    public int[][] spiralMatrixIII(int R, int C, int r0, int c0) {
        int[][] matrix = new int[R*C][2];
        
        int[][] dir = {{0,1}, {1,0}, {0,-1}, {-1,0}};
        
        int count = 0;
        int step = 0;
        int dir_index = 0;
        int r = r0, c = c0;
        matrix[count][0] = r0;
        matrix[count][1] = c0;
        count++;
        
        while(count < R*C){
            for(int i = 0 ; i < step/2+1; i++){
                r = dir[dir_index][0]+r;
                c = dir[dir_index][1]+c;
                
                if(r >= 0 && r < R && c >= 0 && c < C){
                    matrix[count][0] = r;
                    matrix[count][1] = c;
                    count++;
                }
                
            }
            
            step++;
            dir_index = (dir_index+1)%4;
        }
        
        return matrix;
    }
}

=================================================================
if the return looks like this instead:
[30, 25, 16, 7, 8, 9]
[29, 24, 15, 6, 1, 2]
[28, 23, 14, 5, 4, 3]
[27, 22, 13,12,11,10]
[26, 21, 20,19,18,17]

Here is the tiny change to the previous solution:
[Time complexity and Space complexity are the same]
class Solution {
    public int[][] spiralMatrixIII(int R, int C, int r0, int c0) {
        int[][] matrix = new int[R][C];
        
        int[][] dir = {{0,1}, {1,0}, {0,-1}, {-1,0}};
        
        int count = 1;
        int step = 0;
        int dir_index = 0;
        int r = r0, c = c0;
        matrix[r0][c0] = 1;
        
        while(count < R*C){
            for(int i = 0 ; i < step/2+1; i++){
                r = dir[dir_index][0]+r;
                c = dir[dir_index][1]+c;
                
                if(r >= 0 && r < R && c >= 0 && c < C){
                    matrix[r][c] = count+1;
                    count++;
                }
                
            }
            
            step++;
            dir_index = (dir_index+1)%4;
        }
        
        return matrix;
    }
}





