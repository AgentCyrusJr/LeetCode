A move consists of taking a point (x, y) and transforming it to either (x, x+y) or (x+y, y).

Given a starting point (sx, sy) and a target point (tx, ty), return True if and only if a sequence of moves exists to transform the point (sx, sy) to (tx, ty). Otherwise, return False.

Examples:
Input: sx = 1, sy = 1, tx = 3, ty = 5
Output: True
Explanation:
One series of moves that transforms the starting point to the target is:
(1, 1) -> (1, 2)
(1, 2) -> (3, 2)
(3, 2) -> (3, 5)

Input: sx = 1, sy = 1, tx = 2, ty = 2
Output: False

Input: sx = 1, sy = 1, tx = 1, ty = 1
Output: True

Note:

sx, sy, tx, ty will all be integers in the range [1, 10^9].
============================================================
for every step, the transition must be from (x, y) to either (x+y, y) 
or (x, x+y)

so,
if it is the first one, x+y > y, we do tx%=ty as (x+y)%y
else for x < x+y, we do ty%=tx

since all the points are limited in the first quadrant, if sy == ty,
or sx = tx, we can speed up the process by %ty or %tx directly onto the difference

Time: O(lgN)
Time analysis: https://en.wikipedia.org/wiki/Euclidean_algorithm#Algorithmic_efficiency
===========================code=============================
Iteratively
class Solution {
    public boolean reachingPoints(int sx, int sy, int tx, int ty) {
        if(tx < sx || ty < sy) return false;
        
        while(tx >= sx && ty >= sy){
            if(tx > ty){
                if(sy == ty) return (tx - sx)%ty == 0;
                tx %= ty;
            }else{
                if(sx == tx) return (ty - sy)%tx == 0;
                ty %= tx;
            }
        }
        
        return tx == sx && ty == sy;
    }
}

Recursively
class Solution {
    public boolean reachingPoints(int sx, int sy, int tx, int ty) {
        if(tx < sx || ty < sy) return false;
        if(ty > tx && tx == sx) return (ty-sy)%tx == 0;
        if(tx > ty && ty == sy) return (tx-sx)%ty == 0;
        return reachingPoints(sx, sy, tx%ty, ty%tx);
    }
}
