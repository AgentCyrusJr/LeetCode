Find all possible combinations of k numbers that add up to a number n, given that only numbers from 1 to 9 can be used and each combination should be a unique set of numbers.


Example 1:

Input: k = 3, n = 7

Output:

[[1,2,4]]

Example 2:

Input: k = 3, n = 9

Output:

[[1,2,6], [1,3,5], [2,3,4]]
===================codes=================
public class Solution {
    public List<List<Integer>> combinationSum3(int k, int n){
		int[] nums = new int[9];
		List<List<Integer>> list = new ArrayList<List<Integer>>();
	    List<Integer> integer = new ArrayList<Integer>();
	    boolean[] isVisit = new boolean[nums.length];
        for(int  i = 0 ; i < nums.length; i++){
        	isVisit[i] = false;
        	nums[i] = i+1;
        }
        this.bt(nums, integer, list, isVisit , 0, n, k, 0);
        return list;
    }
	
	public void bt(int[] nums, List<Integer> integer,List<List<Integer>> list, boolean[] isVisit,int sum, int n, int k, int start){
		if(integer.size() == k && sum == n){
			list.add(new ArrayList<Integer>(integer));
			return;
		}
		for(int i = start ; i < nums.length; i++){
			if(isVisit[i]==false && integer.size()<=k){
				isVisit[i]=true;
				integer.add(nums[i]);
				this.bt(nums, integer, list, isVisit, sum+nums[i], n, k, nums[i]);
				isVisit[i]=false;
				integer.remove(integer.size()-1);
			}	
		}
	}
}
