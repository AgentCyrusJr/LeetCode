Given a collection of distinct numbers, return all possible permutations.

For example,
[1,2,3] have the following permutations:
[
  [1,2,3],
  [1,3,2],
  [2,1,3],
  [2,3,1],
  [3,1,2],
  [3,2,1]
]
===================codes==================

List<List<Integer>> list;
	public List<List<Integer>> permute(int[] nums) {
		List<List<Integer>> list = new ArrayList<List<Integer>>();
	    List<Integer> integer = new ArrayList<Integer>();
	    boolean[] isVisit = new boolean[nums.length];
        for(int  i = 0 ; i < nums.length; i++){
        	isVisit[i] = false;
        }
        this.bt(nums, integer, isVisit, list);
        return list;
    }
	
	public void bt(int[] nums, List<Integer> integer, boolean[] isVisit, List<List<Integer>> list){
		if(integer.size() == nums.length){
			list.add(new ArrayList<Integer>(integer));
			return;
		}
		
		for(int i = 0 ; i < nums.length; i++){
			if(isVisit[i]==false){
				isVisit[i]=true;
				integer.add(nums[i]);
				this.bt(nums, integer, isVisit, list);
				isVisit[i]=false;
				integer.remove(integer.size()-1);
			}	
		}
	}
