Given two integers n and k, return all possible combinations of k numbers out of 1 ... n.

For example,
If n = 4 and k = 2, a solution is:

[
  [2,4],
  [3,4],
  [2,3],
  [1,2],
  [1,3],
  [1,4],
]
=======================================
Backtracking

similar problem: https://github.com/AgentCyrusJr/LeetCode/blob/master/77.%20Combinations

Time: O(2^N)
Space: O(N)
=================codes=================
class Solution {
    public List<List<Integer>> combine(int n, int k) {
        List<List<Integer>> list = new ArrayList<>();
        helper(list, n, new ArrayList<Integer>(), 1, k);
        return list;
    }
    
    public void helper(List<List<Integer>> list, int n, List<Integer> temp_list, int curr, int size){
        if(temp_list.size() == size){
            list.add(new ArrayList<>(temp_list));
        }
        
        for(int i = curr; i <= n ; i++){
            temp_list.add(i);
            helper(list, n, temp_list, i + 1, size);
            temp_list.remove(temp_list.size()-1);
        }
    }
}
