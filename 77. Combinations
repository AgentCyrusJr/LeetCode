Given two integers n and k, return all possible combinations of k numbers out of 1 ... n.

For example,
If n = 4 and k = 2, a solution is:

[
  [2,4],
  [3,4],
  [2,3],
  [1,2],
  [1,3],
  [1,4],
]
=================codes=================
public class Solution {
    List<List<Integer>> list;
	public List<List<Integer>> combine(int n, int k) {
		List<List<Integer>> list = new ArrayList<List<Integer>>();
	    List<Integer> integer = new ArrayList<Integer>();
	    int[] nums = new int[n];
	    for(int i = 0; i < n; i++){
	    	nums[i] = i+1;
	    }
	    boolean[] isVisit = new boolean[nums.length];
        for(int  i = 0 ; i < nums.length; i++){
        	isVisit[i] = false;
        }
        this.bt(nums, integer, isVisit, list, k, 0);
        // for(List<Integer> ll : list){
        // 	for(int i : ll){
        // 		System.out.print(i+",");
        // 	}
        // 	System.out.println();
        // }
        return list;
    }
	
	public void bt(int[] nums, List<Integer> integer, boolean[] isVisit, List<List<Integer>> list, int k, int index){
		if(integer.size() == k){
			list.add(new ArrayList<Integer>(integer));
			return;
		}
		
		for(int i = index ; i < nums.length; i++){
			if(isVisit[i]==false){
				isVisit[i]=true;
				integer.add(nums[i]);
				this.bt(nums, integer, isVisit, list, k, index);
				isVisit[i]=false;
				integer.remove(integer.size()-1);
			}
			index++;
		}
	}
}
