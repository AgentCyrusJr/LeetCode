Given a linked list, swap every two adjacent nodes and return its head.

For example,
Given 1->2->3->4, you should return the list as 2->1->4->3.

Your algorithm should use only constant space. You may not modify the values in the list, only nodes itself can be changed.
==========================================================
Iterate thru all the nodes, we have curr, next
next -> second.next, curr -> second, second -> first

Time Complexity: O(N)
Space Complexity: O(1)
===========================codes===========================
/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) { val = x; }
 * }
 */
class Solution {
    public ListNode swapPairs(ListNode head) {
        ListNode temp = new ListNode(0);
        temp.next = head;
        
        ListNode curr = temp;
        
        while(curr.next != null && curr.next.next != null){
            ListNode first = curr.next;
            ListNode second = curr.next.next;
            
            first.next = second.next;
            curr.next = second;
            second.next = first;
            
            curr = curr.next.next;
        }
        
        return temp.next;
    }
}
