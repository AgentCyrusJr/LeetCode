Given a linked list, swap every two adjacent nodes and return its head.

For example,
Given 1->2->3->4, you should return the list as 2->1->4->3.

Your algorithm should use only constant space. You may not modify the values in the list, only nodes itself can be changed.

===========================codes===========================
/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) { val = x; }
 * }
 */
public class Solution {
    public ListNode swapPairs(ListNode head) {
        if(head == null || head.next == null) return head;
        int count=0;
        ListNode headNode = head.next;
        ListNode aidNode = null;
        ListNode curr = head;
        ListNode next = head.next;
        ListNode prev = null;
        while(curr.next != null){
        	if(curr.next.next != null){
        		prev = curr;
	        	curr.next = next.next.next;
	       		aidNode = next.next;
	       		next.next = curr;
	       		curr = aidNode;
	       		next = curr.next;
	       	}else{
        		break;
        	}

        }
        if(next != null){
        	next.next = curr;
        	curr.next = null;
        }else{
        	prev.next = curr;
        	curr.next = null;
        }
        return headNode;
    }
}
