Given two words word1 and word2, find the minimum number of steps required to convert word1 to word2. (each operation is counted as 1 step.)

You have the following 3 operations permitted on a word:

a) Insert a character
b) Delete a character
c) Replace a character
==============================
this is a dp question, dp[i][j] represents the minimum number of steps we need to convert word1[0-i] to word2[0-j] inclusively
if word1[i] is equal to word2[j], no steps needed, dp[i][j] = dp[i-1][j-1]
else, we can either
1. delete word1[i] from dp[i-1][j]
2. delete word2[j] from dp[i][j-1]
3. replace word1[i] with word2[j] vice versa
find the min among these three cases

M = word1.length(), N = word2.length()
Time Complexity: O(MN)
Space Complexity: O(MN)
=============codes=============
class Solution {
    public int minDistance(String word1, String word2) {
        int len1 = word1.length(), len2 = word2.length();
        int[][] dp = new int[len1+1][len2+1];
        for(int i = 0; i <= len1; i++){
            for(int j = 0 ; j <= len2; j++){
                if(i == 0){
                    dp[0][j] = j; continue;
                } 
                if(j == 0){
                    dp[i][0] = i; continue;
                }
                
                if(word1.charAt(i-1) == word2.charAt(j-1)){
                    dp[i][j] = dp[i-1][j-1];
                }else{
                    dp[i][j] = Math.min(Math.min(dp[i-1][j-1], dp[i-1][j]) , dp[i][j-1]) + 1;
                }
                
            }
        }
        return dp[len1][len2];
    }
}
