A linked list is given such that each node contains an additional random pointer which could point to any node in the list or null.

Return a deep copy of the list.
=============codes=============
//by jeantimex
/**
 * Definition for singly-linked list with a random pointer.
 * class RandomListNode {
 *     int label;
 *     RandomListNode next, random;
 *     RandomListNode(int x) { this.label = x; }
 * };
 */
public class Solution {
    public RandomListNode copyRandomList(RandomListNode head) {
      if (head == null) return null;
      
      Map<RandomListNode, RandomListNode> map = new HashMap<RandomListNode, RandomListNode>();
      
      // loop 1. copy all the nodes
      RandomListNode node = head;
      while (node != null) {
        map.put(node, new RandomListNode(node.label));
        node = node.next;
      }
      
      // loop 2. assign next and random pointers
      node = head;
      while (node != null) {
        map.get(node).next = map.get(node.next);
        map.get(node).random = map.get(node.random);
        node = node.next;
      }
      
      return map.get(head);
    }
}

//Solution 2
//This solution does not require extra space
这个方法比较难想出来，不需要额外空间，不那么直观。分3步：
1，复制节点，并将拷贝后的节点放到原节点的后面。
2，更新所有拷贝节点的random节点：h.next.random = h.random.next。
3，将原链表与复制链表断开。
public RandomListNode copyRandomList(RandomListNode head) {
    if(head == null) return null;
    //1.
    RandomListNode h = head;
    while(h != null) {
        RandomListNode copy = new RandomListNode(h.label);
        RandomListNode next = h.next;
        h.next = copy;
        copy.next = next;
        h = next;
    }
    //2.
    h = head;
    while(h != null) {
        if(h.random != null)
            h.next.random = h.random.next;
        h = h.next.next;
    }
    //3.
    h = head;
    RandomListNode newHead = h.next;
    while(h != null) {
        RandomListNode copy = h.next;
        h.next = copy.next;
        h = h.next;
        copy.next = h != null ? h.next : null;
    }
    
    return newHead;
}

//Solution 3
//recursive solution
Map<RandomListNode, RandomListNode> map = new HashMap<>();  
public RandomListNode copyRandomList(RandomListNode head) {  
    if(head == null) return null;  
    RandomListNode copy = map.get(head);  
    if(copy == null) {  
        copy = new RandomListNode(head.label);  
        map.put(head, copy);  
        copy.next = copyRandomList(head.next);  
        copy.random = copyRandomList(head.random);  
    }  
    return copy;  
}  
