Given a binary search tree (BST), find the lowest common ancestor (LCA) of two given nodes in the BST.

According to the definition of LCA on Wikipedia: “The lowest common ancestor is defined between two nodes v and w as the lowest node in T that has both v and w as descendants (where we allow a node to be a descendant of itself).”

        _______6______
       /              \
    ___2__          ___8__
   /      \        /      \
   0      _4       7       9
         /  \
         3   5
For example, the lowest common ancestor (LCA) of nodes 2 and 8 is 6. Another example is LCA of nodes 2 and 4 is 2, since a node can be a descendant of itself according to the LCA definition.

=========================codes======================
/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
public class Solution {
    public TreeNode lowestCommonAncestor(TreeNode root, TreeNode p, TreeNode q) {
        if(root == null) return root;
        int pVal = 0, qVal = 0;
        while(root != null){
        	if(p.val > root.val){
	        	pVal = 1;
	        }else if(p.val<root.val)
	        	pVal = -1;
	        else
	        	pVal = 0;
	        if(q.val > root.val){
	        	qVal = 1;
	        }else if(q.val < root.val)
	        	qVal = -1;
	        else
	        	qVal = 0;
	        if(pVal*qVal <= 0){
	        	break;
	        }else if(pVal == 1){
	        	root = root.right;
	        }else if(pVal == -1){
	        	root = root.left;
	        }
        }
        return root;	
    }
}

========================
//by jingzhetian 
public class Solution {
    public TreeNode lowestCommonAncestor(TreeNode root, TreeNode p, TreeNode q) {
        if(root.val > p.val && root.val > q.val){
            return lowestCommonAncestor(root.left, p, q);
        }else if(root.val < p.val && root.val < q.val){
            return lowestCommonAncestor(root.right, p, q);
        }else{
            return root;
        }
    }
}
