Given an array of integers, every element appears three times except for one. Find that single one.

Note:
Your algorithm should have a linear runtime complexity. Could you implement it without using extra memory?

=======================codes==========================
public class Solution {
    public int singleNumber(int[] nums) {
        Arrays.sort(nums);
        int result = 0;
        for(int i = 0 ; i+2 < nums.length; i++){
        	if(nums[i] == nums[i+1]){ i = i+2; }
        	else result=nums[i];
        }
        if(nums.length == 1){
        	result = nums[0];
        }
        else if(nums[nums.length-1]!=nums[nums.length-2]){
        	result = nums[nums.length-1];
        }
        return result;
    }
}

========================
//Challenge me?
//by againest1

public int singleNumber(int[] A) {
    int ones = 0, twos = 0;
    for(int i = 0; i < A.length; i++){
        ones = (ones ^ A[i]) & ~twos;
        twos = (twos ^ A[i]) & ~ones;
    }
    return ones;
}
