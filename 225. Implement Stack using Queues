Implement the following operations of a stack using queues.

push(x) -- Push element x onto stack.
pop() -- Removes the element on top of the stack.
top() -- Get the top element.
empty() -- Return whether the stack is empty.
Notes:
You must use only standard operations of a queue -- which means only push to back, peek/pop from front, size, and is empty operations are valid.
Depending on your language, queue may not be supported natively. You may simulate a queue by using a list or deque (double-ended queue), as long as you use only standard operations of a queue.
You may assume that all operations are valid (for example, no pop or top operations will be called on an empty stack).

============codes start from here==============
class MyStack {
	Deque<Integer> stack = new ArrayDeque<Integer>();
    // Push element x onto stack.
    public void push(int x) {
        stack.push(x);
    }

    // Removes the element on top of the stack.
    public void pop() {
    	if(stack.isEmpty() != true){
    		stack.pop();
    	}
    }

    // Get the top element.
    public int top() {
    	if(stack.isEmpty() != true){
    		return stack.getFirst();
    	}
    	else
    		return -1;
    }

    // Return whether the stack is empty.
    public boolean empty() {
        return stack.isEmpty();
    }
}

================================================
//other solution, not limited to one solution
//by StefanPochmann

class MyStack {

    private Queue<Integer> queue = new LinkedList<>();

    public void push(int x) {
        queue.add(x);
        for (int i=1; i<queue.size(); i++)
            queue.add(queue.remove());
    }

    public void pop() {
        queue.remove();
    }

    public int top() {
        return queue.peek();
    }

    public boolean empty() {
        return queue.isEmpty();
    }
}
