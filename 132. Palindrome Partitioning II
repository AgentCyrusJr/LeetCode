Given a string s, partition s such that every substring of the partition is a palindrome.

Return the minimum cuts needed for a palindrome partitioning of s.

For example, given s = "aab",
Return 1 since the palindrome partitioning ["aa","b"] could be produced using 1 cut.
=====================codes===================
//O(n^3) Time complexity
//which is a TLE problem
class Solution {
    public int minCut(String s) {
        int[][] dp = new int[s.length()][s.length()];
        for (int[] row: dp){
            Arrays.fill(row, s.length()-1);
        }
        
        for(int l = 0; l< s.length(); l++){
            for(int i = 0; i+l < s.length();i++){
                if(isPalindrome(s.substring(i,i+l+1))){
                    dp[i][i+l] = 0;
                }else{
                    for(int k = 0; k < l; k++){
                        dp[i][i+l] = Math.min(dp[i][i+l], 1+dp[i][i+k]+dp[i+k+1][i+l]);
                    }
                }
            }
        }
        
        return dp[0][s.length()-1];
    }
    
    public boolean isPalindrome(String s){
        int i = 0, j = s.length()-1;
        while(i < j){
            if(s.charAt(i++) != s.charAt(j--)) return false;
            
        }
        return true;
    }
    
}
