Given a collection of candidate numbers (C) and a target number (T), find all unique combinations in C where the candidate numbers sums to T.

Each number in C may only be used once in the combination.

Note:
All numbers (including target) will be positive integers.
The solution set must not contain duplicate combinations.
For example, given candidate set [10, 1, 2, 7, 6, 1, 5] and target 8, 
A solution set is: 
[
  [1, 7],
  [1, 2, 5],
  [2, 6],
  [1, 1, 6]
]
================codes================
public class Solution {
   public List<List<Integer>> combinationSum2(int[] candidates, int target){
		int count = 0;
		for(int i: candidates){
			if(i<= target){
				count++;
			}
		}
		int[] nums = new int[count];
		int j = 0;
		for(int i : candidates){
			if(i<= target){
				nums[j++] = i;
			}
		}
		Arrays.sort(nums);
		List<List<Integer>> list = new ArrayList<List<Integer>>();
	    List<Integer> integer = new ArrayList<Integer>();
	    boolean[] isVisit = new boolean[nums.length];
        for(int  i = 0 ; i < nums.length; i++){
        	isVisit[i] = false;
        }
        this.bt(nums, integer, list, isVisit , 0, target, 0);
        System.out.println(list.size());
        return list;
    }
	
	public void bt(int[] nums, List<Integer> integer,List<List<Integer>> list, boolean[] isVisit,int sum, int target, int start){
		if(sum == target){
			list.add(new ArrayList<Integer>(integer));
			return;
		}
		for(int i = start ; i < nums.length; i++){
			if(i<nums.length && isVisit[i]==false && sum < target){
				isVisit[i]=true;
				integer.add(nums[i]);
				this.bt(nums, integer, list, isVisit, sum+nums[i], target, i+1);
				isVisit[i]=false;
				integer.remove(integer.size()-1);
				while(i+1 < nums.length && nums[i+1] == nums[i]){
					i++;
				}
			}	
		}
	}
}
