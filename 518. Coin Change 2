You are given coins of different denominations and a total amount of money. Write a function to compute the number of combinations that make up that amount. You may assume that you have infinite number of each kind of coin.

Note: You can assume that

0 <= amount <= 5000
1 <= coin <= 5000
the number of coins is less than 500
the answer is guaranteed to fit into signed 32-bit integer
Example 1:

Input: amount = 5, coins = [1, 2, 5]
Output: 4
Explanation: there are four ways to make up the amount:
5=5
5=2+2+1
5=2+1+1+1
5=1+1+1+1+1
Example 2:

Input: amount = 3, coins = [2]
Output: 0
Explanation: the amount of 3 cannot be made up just with coins of 2.
Example 3:

Input: amount = 10, coins = [10] 
Output: 1
==================codes=================
public int change(int amount, int[] coins) {
        if(amount == 0) return 1;
        if(coins.length == 0){
            if(amount == 0) return 1;
            else{
                return 0;
            }
        }
        int[][] dp = new int[coins.length][amount+1];
        int k = 1;
        while(coins[0]*k <= amount){
            dp[0][coins[0]*k] = 1;
            k++;
        }
        for(int i = 1; i < coins.length; i++){
            for(int j = 1 ; j <= amount; j++){
                if(coins[i] > j ) dp[i][j] = dp[i-1][j];
                else if(coins[i] == j) dp[i][j] = dp[i-1][j]+1;
                else{
                    dp[i][j] = dp[i-1][j] + dp[i][j-coins[i]];
                }
            }
        }
        return dp[coins.length-1][amount];
    }
====================2017/9/29===============
class Solution {
    public int change(int amount, int[] coins) {
        
        int[][] result = new int[coins.length+1][amount+1];
        for(int i = 0; i<coins.length+1; i++){
            result[i][0] = 1;
        }
        for(int i = 1; i<coins.length+1; i++){
            for(int j = 1; j<amount+1; j++){
                if(coins[i-1] > j) result[i][j] = result[i-1][j];
                else if(coins[i-1] == j){
                    result[i][j] = result[i-1][j] + 1;
                }else{
                    result[i][j] = result[i-1][j] + result[i][j-coins[i-1]];
                }
            }
        }
        return result[coins.length][amount];
    }
    
    
}
