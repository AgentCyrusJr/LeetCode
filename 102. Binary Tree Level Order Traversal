Given a binary tree, return the level order traversal of its nodes' values. (ie, from left to right, level by level).

For example:
Given binary tree [3,9,20,null,null,15,7],
    3
   / \
  9  20
    /  \
   15   7
return its level order traversal as:
[
  [3],
  [9,20],
  [15,7]
]

===========================codes========================
//recursive method of LFS
public class Solution {
    public List<List<Integer>> levelOrder(TreeNode root) {
        List<List<Integer>> result = new ArrayList<>();
		traversalTree(root, 0, result);;
		return result;
	}
	
	private void traversalTree(TreeNode node, int level, List<List<Integer>> list){
		if(node == null){
			return;
		}
		if(list.size() <= level){
			list.add(new ArrayList<Integer>());
		}
		list.get(level).add(node.val);
		
		traversalTree(node.left, level+1, list);
		traversalTree(node.right, level+1, list);
    }
}

//BFS
//siranliu
public class Solution {
public List<List<Integer>> levelOrder(TreeNode root) {
   List<List<Integer>> table = new ArrayList<List<Integer>>();
    Queue<TreeNode> q = new LinkedList<TreeNode>();
    q.add(root);
    while (q.peek()!=null)
    {
        List<Integer> table2 = new ArrayList<Integer>();
        int size =q.size();
        for (int i = 0 ; i < size; i ++)
        {
            TreeNode temp = q.remove();
            table2.add(temp.val);
            if (temp.left!=null) q.add(temp.left);
            if (temp.right!=null) q.add(temp.right);
        }
        table.add(table2);
    }
    return table;
    
}
