Given a binary tree, return the inorder traversal of its nodes' values.

For example:
Given binary tree [1,null,2,3],
   1
    \
     2
    /
   3
return [1,3,2].
===============================codes=======================
/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
public class Solution {
    ArrayList<Integer> al = new ArrayList<Integer>();
    public List<Integer> inorderTraversal(TreeNode root) {
         
        if (root != null) {  
            inorderTraversal(root.left);  
            al.add(root.val);  
            inorderTraversal(root.right);  
        }  
        return al;
    }
}
===============2017/10/24===============
//iterative method
//Thoughts: using a stack
/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
class Solution {
    public List<Integer> inorderTraversal(TreeNode root) {
        List<Integer> list = new ArrayList<Integer>();
        if(root == null) return list;
        Stack<TreeNode> stack = new Stack<TreeNode>();
        while(true){
            if(root != null){
                stack.push(root);
                root = root.left;
            }else{
                if(stack.size() == 0) break;
                TreeNode tn = stack.pop();
                list.add(tn.val);
                root = tn.right;
            }
        }
        return list;
    }
}


