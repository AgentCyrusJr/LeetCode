Given an integer n, generate a square matrix filled with elements from 1 to n2 in spiral order.

For example,
Given n = 3,

You should return the following matrix:
[
 [ 1, 2, 3 ],
 [ 8, 9, 4 ],
 [ 7, 6, 5 ]
]
===============================================
Four pointers

Similar to Spiral Matrix I

Time: O(N^2)
Space: O(1)
=======================codes===================
class Solution {
    public int[][] generateMatrix(int n) {
        int[][] matrix = new int[n][n];
        
        int row_start = 0, row_end = n-1, col_start = 0, col_end = n-1;
        int count = 1;
        while(row_start <= row_end && col_start <= col_end){
            for(int i = col_start; i <= col_end; i++){
                matrix[row_start][i] = count++;
            }
            row_start++;
            
            for(int i = row_start; i <= row_end; i++){
                matrix[i][col_end] = count++;
            }
            col_end--;
            
            if(row_start <= row_end){
                for(int i = col_end; i>= col_start; i--){
                    matrix[row_end][i] = count++;
                }
            }
            row_end--;
            
            if(col_start <= col_end){
                for(int i = row_end; i>= row_start; i--){
                    matrix[i][col_start] = count++;
                }
            }
            col_start++;
        }
        
        return matrix;
    }
}
