Given an integer n, generate a square matrix filled with elements from 1 to n2 in spiral order.

For example,
Given n = 3,

You should return the following matrix:
[
 [ 1, 2, 3 ],
 [ 8, 9, 4 ],
 [ 7, 6, 5 ]
]
=======================codes===================
public class Solution {
    public int[][] generateMatrix(int n) {
        int row_first = 0, row_last = n, col_first = 0, col_last = n;
        int[][] m = new int[n][n];
        int index = 1;
        while(index <= n*n){
        	for(int i = col_first ; i < col_last; i++){
        		m[row_first][i] = index++;
//        		System.out.println(m[row_first][i] + " " + row_first + " " + i);
        	}
        	col_last--;
//        	System.out.println(col_last);
        	
        	for(int j = row_first+1; j<row_last ; j++ ){
        		m[j][col_last] = index++;
//        		System.out.println(m[j][col_last] + " " + j + " " + col_last);
        	}
        	row_last--;
//        	System.out.println(row_last);
        	
        	for(int k = col_last-1; k>= row_first ; k--){
        		m[row_last][k] = index++;
//        		System.out.println(m[row_last][k] + " " + row_last + " " + k);
        	}
        	col_first++;
//        	System.out.println(col_first);
        	
        	for(int l = row_last-1; l>row_first; l--){
        		m[l][row_first] = index++;
//        		System.out.println(m[l][row_first] + " " + l + " " + row_first);
        	}
        	row_first++;
//        	System.out.println(row_first);
        }
        return m;
    }
}
