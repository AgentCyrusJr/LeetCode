You are climbing a stair case. It takes n steps to reach to the top.

Each time you can either climb 1 or 2 steps. In how many distinct ways can you climb to the top?

===========================codes==================
//This is a Fibonacci sequence
public int climbStairs(int n) {
        return (int)(1/Math.sqrt(5)*(Math.pow((1+Math.sqrt(5))/2,n+1)-Math.pow((1-Math.sqrt(5))/2,n+1)));
    }
    
=======================================
//by tony.mu101999
public class Solution {
    public int climb(int[] results, int n) {
        if(n == 0) return 1;
        if(n > 0) {
            if(results[n] != 0) {
                return results[n];
            }
            results[n] = climb(results, n-1) + climb(results, n-2);
            return results[n];
        }
        return 0;

    }
    public int climbStairs(int n) {
        int[] results = new int[n+1];
        return climb(results, n);
    }
}
