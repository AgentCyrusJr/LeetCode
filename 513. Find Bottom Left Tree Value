Given a binary tree, find the leftmost value in the last row of the tree.

Example 1:
Input:

    2
   / \
  1   3

Output:
1
Example 2: 
Input:

        1
       / \
      2   3
     /   / \
    4   5   6
       /
      7

Output:
7
Note: You may assume the tree (i.e., the given root node) is not NULL.
================codes=================
/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
public class Solution {
    public int findBottomLeftValue(TreeNode root) {
        LinkedList<TreeNode> l1 = new LinkedList<TreeNode>();
        LinkedList<TreeNode> l2 = new LinkedList<TreeNode>();
        l1.offer(root);
        int res = l1.get(0).val;
        while(l1.size()!=0){
            TreeNode n = l1.poll();
            if(n.left!=null){
                l2.offer(n.left);
            }
            if(n.right!=null){
                l2.offer(n.right);
            }
            
            if(l1.size()==0){
                l1 = l2;
                if(l1.size()!=0){
                    res = l1.get(0).val;
                }
                l2 = new LinkedList<TreeNode>();
            }
        }
        return res;
    }
}
