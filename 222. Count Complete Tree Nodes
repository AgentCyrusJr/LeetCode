Given a complete binary tree, count the number of nodes.

Definition of a complete binary tree from Wikipedia:
In a complete binary tree every level, except possibly the last, is completely filled, and all nodes in the last level are as far left as possible. It can have between 1 and 2h nodes inclusive at the last level h.
============codes===========
/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
public class Solution {
    public int countNodes(TreeNode root) {
    if(root == null) {
        return 0;
    }
    int count = 0;
    int leftHeight = getHeight(root.left);
    int rightHeight = getHeight(root.right);
    
    if(leftHeight == rightHeight) {
        count = 1 + (1<<leftHeight)-1 + countNodes(root.right);
    }
    else {
        count = 1 + (1<<rightHeight)-1 + countNodes(root.left);
    }
    
    return count;
}

public static int getHeight(TreeNode root){
    int count = 0;
    while(root != null) {
        count++;
        root = root.left;
    }
    return count;
}
}
