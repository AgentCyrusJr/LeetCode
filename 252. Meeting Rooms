Given an array of meeting time intervals consisting of start and end times [[s1,e1],[s2,e2],...] (si < ei), determine if a person could attend all meetings.

For example,
Given [[0, 30],[5, 10],[15, 20]],
return false.
===================================
sort the start and end separately

the key observation is that if there exists
start[i+1], where start[i+1] < end[i], which indicates an overlap on time

for example, start[i+1] = 5, and end[i] = 7
assuming there is no overlap, then there must be a valid end[j] matches starts[i+1]
which should also meet the condition ends[j] < ends[i], but it is impossible 

Time: O(NlogN)
Space: O(N)
================codes==============
/**
 * Definition for an interval.
 * public class Interval {
 *     int start;
 *     int end;
 *     Interval() { start = 0; end = 0; }
 *     Interval(int s, int e) { start = s; end = e; }
 * }
 */
public class Solution {
    public boolean canAttendMeetings(Interval[] intervals) {
        int[] starts = new int[intervals.length];
        int[] ends = new int[intervals.length];
        
        for(int i = 0 ; i < intervals.length; i++){
            starts[i] = intervals[i].start;
            ends[i] = intervals[i].end;
        }
        
        Arrays.sort(starts);
        Arrays.sort(ends);
        
        for(int i = 0; i < intervals.length - 1; i++){
            if(ends[i] > starts[i+1]){
                return false;
            }
        }
        
        return true;
    }
}
