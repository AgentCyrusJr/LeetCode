Given a binary tree containing digits from 0-9 only, each root-to-leaf path could represent a number.

An example is the root-to-leaf path 1->2->3 which represents the number 123.

Find the total sum of all root-to-leaf numbers.

For example,

    1
   / \
  2   3
The root-to-leaf path 1->2 represents the number 12.
The root-to-leaf path 1->3 represents the number 13.

Return the sum = 12 + 13 = 25.
=================codes================
/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
public class Solution {
    int res = 0;
	List<String> list = new ArrayList<String>();
	public int sumNumbers(TreeNode root) {
        if(root == null) return res;
        this.dfs(root, "");
        for(String s: list){
        	res+=Integer.parseInt(s);
        }
        return res;
    }
    
	public void dfs(TreeNode root, String result){
        result += ""+root.val;
        if(root.left!=null){
        	this.dfs(root.left, result);
        }
        if(root.right!=null){
        	this.dfs(root.right, result);
        }
        if(root.left == null && root.right == null){
        	list.add(result);
        }
	}
}
