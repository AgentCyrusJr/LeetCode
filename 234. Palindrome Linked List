Given a singly linked list, determine if it is a palindrome.

Follow up:
Could you do it in O(n) time and O(1) space?
===============================================
Use slow and fast node to find the mid node.

reverse the second half of the nodes starting from mid node, return reversed node
compare the head with reversed node one by one

Time: O(n)
Space: O(1)
=====================codes======================
/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) { val = x; }
 * }
 */
class Solution {
    public boolean isPalindrome(ListNode head) {
        if(head == null || head.next == null) return true;
        ListNode slow = head, fast = head;
        
        while(fast.next != null && fast.next.next != null){
            slow = slow.next;
            fast = fast.next.next;
        }
        
        ListNode mid = slow.next;
        slow.next = null;
        
        ListNode reversed = reverse(mid);
        
        while(head != null && reversed != null){
           if(reversed.val != head.val){
               return false;
           }
            head = head.next;
            reversed = reversed.next;
        }
        return true;
        
    }
    
    public ListNode reverse(ListNode node){
        ListNode prev = null;
        while(node != null){
            ListNode next = node.next;
            node.next = prev;
            prev = node;
            node = next;
        }
        
        return prev;
    }
}
