There are a row of n houses, each house can be painted with one of the k colors. The cost of painting each house with a certain color is different. You have to paint all the houses such that no two adjacent houses have the same color.

The cost of painting each house with a certain color is represented by a n x k cost matrix. For example, costs[0][0] is the cost of painting house 0 with color 0; costs[1][2] is the cost of painting house 1 with color 2, and so on... Find the minimum cost to paint all houses.

Note:
All costs are positive integers.

Follow up:
Could you solve it in O(nk) runtime?
==============codes==============
public class Solution {
    public int minCostII(int[][] costs) {
        if(costs.length == 0) return 0;
        int m = costs.length;
        int n = costs[0].length;
        for(int i = 0 ; i < m-1 ; i++){
            int min1 = Integer.MAX_VALUE, min2 = Integer.MAX_VALUE;
            int index1 = 0, index2 = 0;
            //find the min value and its index
            for(int j = 0; j < n; j++){
                if(min1>costs[i][j]){
                    min1 = costs[i][j];
                    index1 = j;
                }
            }
            //find the second min value and its index
            for(int j = 0; j < n; j++){
                if(min2>costs[i][j] && j!= index1){
                    min2 = costs[i][j];
                    index2 = j;
                }
            }
            for(int j = 0 ; j< n; j++){
                if(j == index1){
                    costs[i+1][j] += costs[i][index2];
                }else{
                    costs[i+1][j] += costs[i][index1];
                }
            }
        }
        int min = Integer.MAX_VALUE;
        for(int k = 0 ; k < n; k++){
            if(min>costs[m-1][k]){
                min = costs[m-1][k];
            }
        }
        return min;
    }
}
