All DNA is composed of a series of nucleotides abbreviated as A, C, G, and T, for example: "ACGAATTCCG". When studying DNA, it is sometimes useful to identify repeated sequences within the DNA.

Write a function to find all the 10-letter-long sequences (substrings) that occur more than once in a DNA molecule.

For example,

Given s = "AAAAACCCCCAAAAACCCCCCAAAAAGGGTTT",

Return:
["AAAAACCCCC", "CCCCCAAAAA"].
===============codes==============

public class Solution {
    public List<String> findRepeatedDnaSequences(String s) {
        Set<String> res = new HashSet<String>();
        HashMap<String, Integer> map = new HashMap<String, Integer>();
        int len = s.length();
        for(int i = 0 ; i+10 <=len; i++){
            String ss = s.substring(i, i+10);
            if(!map.containsKey(ss)){
                map.put(ss, 1);
            }else{
                res.add(ss);
            }
        }
        return new ArrayList(res);
    }
}
==============python==============
from sets import Set
class Solution(object):
    def findRepeatedDnaSequences(self, s):
        set = Set()
        list = []
        for i in range(0, len(s)-9):
            ss = s[i:i+10]
            if ss in set and ss not in list:
                list.append(ss)
            else:
                set.add(ss)
        return list
                    
