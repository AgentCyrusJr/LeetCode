Write a program to find the node at which the intersection of two singly linked lists begins.


For example, the following two linked lists:

A:          a1 → a2
                   ↘
                     c1 → c2 → c3
                   ↗            
B:     b1 → b2 → b3
begin to intersect at node c1.

Notes:

If the two linked lists have no intersection at all, return null.
The linked lists must retain their original structure after the function returns.
You may assume there are no cycles anywhere in the entire linked structure.
Your code should preferably run in O(n) time and use only O(1) memory.
===========================================
Find the difference between two linked list,
move the pointer of the longer linked list to have the
same distance to the tail as the shorter one.

iterate through both linked lists one by one to find the coverged one

Time: O(N)
Space: O(1)
====================codes==================
/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) {
 *         val = x;
 *         next = null;
 *     }
 * }
 */
public class Solution {
    public ListNode getIntersectionNode(ListNode headA, ListNode headB) {
        int len1 = 0, len2 = 0;
        ListNode dummy1 = new ListNode(0);
        ListNode dummy2 = new ListNode(0);
        dummy1.next = headA; dummy2.next = headB;
        
        while(headA != null){
            len1++;
            headA = headA.next;
        }
        
        while(headB != null){
            len2++;
            headB = headB.next;
        }
        
        headA = dummy1.next;
        headB = dummy2.next;
        
        if(len1 >= len2){
            int index= 0;
            while(index < len1-len2){
                headA = headA.next;
                index++;
            }
        }else{
            int index =0;
            while(index < len2 - len1){
                headB = headB.next;
                index++;
            }
        }
        
        while(headA != headB){
            headA = headA.next;
            headB = headB.next;
        }
        
        return headA;
    }
}
