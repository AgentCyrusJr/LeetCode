You are given a m x n 2D grid initialized with these three possible values.

-1 - A wall or an obstacle.
0 - A gate.
INF - Infinity means an empty room. We use the value 231 - 1 = 2147483647 to represent INF as you may assume that the distance to a gate is less than 2147483647.
Fill each empty room with the distance to its nearest gate. If it is impossible to reach a gate, it should be filled with INF.

For example, given the 2D grid:
INF  -1  0  INF
INF INF INF  -1
INF  -1 INF  -1
  0  -1 INF INF
After running your function, the 2D grid should be:
  3  -1   0   1
  2   2   1  -1
  1  -1   2  -1
  0  -1   3   4
Show Company Tags
Show Tags
Show Similar Problems
==============codes=============
public class Solution {
    public void wallsAndGates(int[][] rooms) {
        if(rooms.length == 0) return;
        int m = rooms.length, n = rooms[0].length;
        for(int i = 0; i< m; i++){
            for(int j = 0; j< n; j++){
                if(rooms[i][j] == 0){
                    dfs(i, j, rooms, 0);
                }
            }
        }
    }
    
    public void dfs(int i,int j,int[][] rooms, int val){
        if(i<0 || i>=rooms.length || j<0 || j>=rooms[0].length || rooms[i][j]<val){
            return;
        }
        rooms[i][j] = val;
        dfs(i-1, j, rooms, val+1);
        dfs(i+1, j, rooms, val+1);
        dfs(i, j-1, rooms, val+1);
        dfs(i, j+1, rooms, val+1);
    }
}
