Given a binary tree, imagine yourself standing on the right side of it, return the values of the nodes you can see ordered from top to bottom.

For example:
Given the following binary tree,
   1            <---
 /   \
2     3         <---
 \     \
  5     4       <---
You should return [1, 3, 4].
=============codes==============
/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
public class Solution {
     public List<Integer> rightSideView(TreeNode root) {
    	LinkedList<TreeNode> current = new LinkedList<TreeNode>();
        LinkedList<TreeNode> next = new LinkedList<TreeNode>();
        List<Integer> res = new ArrayList<Integer>();
        if(root == null)
            return res;
        
        current.add(root);
        res.add(root.val);
        while(!current.isEmpty()){
            TreeNode node = current.remove();
            if(node.right != null)
                next.add(node.right);
            if(node.left != null)
                next.add(node.left);
            //LFS 
            if(current.isEmpty()){
                current = next;
                next = new LinkedList<TreeNode>();
                if(!current.isEmpty()){
                	res.add(current.getFirst().val);
                }
                
            }
        }
        return res;
    }
}
