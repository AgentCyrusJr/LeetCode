Given the root of a binary tree, the level of its root is 1, the level of its children is 2, and so on.

Return the smallest level X such that the sum of all the values of nodes at level X is maximal.

 

Example 1:



Input: [1,7,0,7,-8,null,null]
Output: 2
Explanation: 
Level 1 sum = 1.
Level 2 sum = 7 + 0 = 7.
Level 3 sum = 7 + -8 = -1.
So we return the level with the maximum sum which is level 2.
 

Note:

The number of nodes in the given tree is between 1 and 10^4.
-10^5 <= node.val <= 10^5
=======================================================
LFS

Time: O(N)
Space: O(N)
==========================code=========================
/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
class Solution {
    public int maxLevelSum(TreeNode root) {
        int level = 1, max = Integer.MIN_VALUE, level_sum = 0, max_level = 0;;
        
        Queue<TreeNode> q1 = new LinkedList<>();
        Queue<TreeNode> q2 = new LinkedList<>();
        q1.add(root);
        
        while(!q1.isEmpty()){
            TreeNode n = q1.poll();
            level_sum += n.val;
            if(n.left != null){
                q2.add(n.left);
            }
            if(n.right != null){
                q2.add(n.right);
            }
            
            if(q1.size() == 0){
                if(max < level_sum){
                    max = level_sum;
                    max_level = level; 
                }
                q1 = q2;
                q2 = new LinkedList<>();
                level++;
                level_sum = 0;
            }
        }
        
        return max_level;
    }
}
