Given a binary tree, find the lowest common ancestor (LCA) of two given nodes in the tree.

According to the definition of LCA on Wikipedia: “The lowest common ancestor is defined between two nodes v and w as the lowest node in T that has both v and w as descendants (where we allow a node to be a descendant of itself).”

        _______3______
       /              \
    ___5__          ___1__
   /      \        /      \
   6      _2       0       8
         /  \
         7   4
For example, the lowest common ancestor (LCA) of nodes 5 and 1 is 3. Another example is LCA of nodes 5 and 4 is 5, since a node can be a descendant of itself according to the LCA definition.
==============codes=============
public class Solution {
    public TreeNode lowestCommonAncestor(TreeNode root, TreeNode p, TreeNode q) {
		if(root==null || p==null || q==null) return null; 
		List<TreeNode> path1 = new ArrayList<TreeNode>();
	    List<TreeNode> path2 = new ArrayList<TreeNode>();
	    TreeNode n1 = root, n2 = root;
	    findPath(n1, p, path1);
	    findPath(n2, q, path2);
	    int i = path1.size()-1;
	    int j = path2.size()-1;
	    while(i>=0 && j>=0 && path1.get(i).val == path2.get(j).val){
	    	i--;j--;
	    }
	    return path1.get(i+1);
    }
	
	public boolean findPath(TreeNode root, TreeNode n, List<TreeNode> list) {
	    if (root == null) {
	        return false;
	    }
	    
	    if (root == n || findPath(root.left, n, list) || findPath(root.right, n, list)) {
	        list.add(root);
	        return true;
	    }
	    return false;
	}
}
==========================
// https://www.hrwhisper.me/algorithm-lowest-common-ancestor-of-a-binary-tree/
// by IlievskiV 
public static TreeNode lowestCommonAncestor(TreeNode root, TreeNode node1, TreeNode node2) {

	if (root == null || root == node1 || root == node2)
		return root;

	TreeNode leftSearch = lowestCommonAncestor(root.left, node1, node2);
	TreeNode rightSearch = lowestCommonAncestor(root.right, node1, node2);

	if (leftSearch != null && rightSearch != null) {
		return root;
	} else if (leftSearch != null && rightSearch == null) {
		return leftSearch;
	} else if (leftSearch == null && rightSearch != null) {
		return rightSearch;
	} else {
		return null;
	}

}

// by lotuseater 
public TreeNode lowestCommonAncestor(TreeNode root, TreeNode p, TreeNode q) {
    LinkedList<TreeNode> pl = new LinkedList<TreeNode>();
    LinkedList<TreeNode> ql = new LinkedList<TreeNode>();
    findPath(root, p, pl);
    findPath(root, q, ql);
    //find first intersection node
    LinkedList<TreeNode> longPath = pl.size() > ql.size() ? pl : ql;
    int diff = Math.abs(pl.size() - ql.size());
    for (int i = 0; i < diff; i++) {
        longPath.removeFirst();
    }
    while (pl.peek() != ql.peek()) {
        pl.removeFirst();
        ql.removeFirst();
    }
    return pl.peek();
}

public boolean findPath(TreeNode root, TreeNode n, LinkedList<TreeNode> list) {
    if (root == null) {
        return false;
    }
    
    if (root == n || findPath(root.left, n, list) || findPath(root.right, n, list)) {
        list.addLast(root);
        return true;
    }
    return false;
}
