Given a non-empty array of non-negative integers nums, the degree of this array is defined as the maximum frequency of any one of its elements.

Your task is to find the smallest possible length of a (contiguous) subarray of nums, that has the same degree as nums.

Example 1:
Input: [1, 2, 2, 3, 1]
Output: 2
Explanation: 
The input array has a degree of 2 because both elements 1 and 2 appear twice.
Of the subarrays that have the same degree:
[1, 2, 2, 3, 1], [1, 2, 2, 3], [2, 2, 3, 1], [1, 2, 2], [2, 2, 3], [2, 2]
The shortest length is 2. So return 2.
Example 2:
Input: [1,2,2,3,1,4,2]
Output: 6
Note:

nums.length will be between 1 and 50,000.
nums[i] will be an integer between 0 and 49,999.
=======================codes=====================
class Solution {
    public int findShortestSubArray(int[] nums) {
        if(nums.length == 0) return 0;
        HashMap<Integer, List<Integer>> map = new HashMap<Integer, List<Integer>>();
        int max = 0;
        for(int i = 0 ; i < nums.length; i++){
            List<Integer> list = new ArrayList<Integer>();
            if(map.containsKey(nums[i])){
                list = map.get(nums[i]);
            }else{
                list = new ArrayList<Integer>();     
            }
            list.add(i);
            map.put(nums[i], list);
            if(list.size() > max){
                max = list.size();
            }
        }
        System.out.println(max);
        int range = Integer.MAX_VALUE;
        for(int i : map.keySet()){
            List<Integer> ll = map.get(i);
            if(ll.size() == max){
                int r = ll.get(ll.size()-1) - ll.get(0);
                if(r < range) range = r;
            }
        }
        return range+1;
    }
}
