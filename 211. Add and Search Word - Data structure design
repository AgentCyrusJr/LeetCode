Design a data structure that supports the following two operations:

void addWord(word)
bool search(word)
search(word) can search a literal word or a regular expression string containing only letters a-z or .. A . means it can represent any one letter.

For example:

addWord("bad")
addWord("dad")
addWord("mad")
search("pad") -> false
search("bad") -> true
search(".ad") -> true
search("b..") -> true
Note:
You may assume that all words are consist of lowercase letters a-z.

click to show hint.

You should be familiar with how a Trie works. If not, please work on this problem: Implement Trie (Prefix Tree) first.
====================codes====================
public class WordDictionary {

    private TrieNode root;

    public WordDictionary() {
        root = new TrieNode();
    }
    
    public void addWord(String word) {
		char chars[] = word.toCharArray();
        addWord(chars, 0, root);
    }
	
	private void addWord(char[] chars, int index, TrieNode parent) {
		char c = chars[index];
        TrieNode node = parent.nexts.get(c);
        if (node == null){
        	node = new TrieNode();
        	parent.nexts.put(c, node);
        }
        if (chars.length == index+1){
        	node.isWord=true;
        	return;
        }
        addWord(chars, ++index, node);
    }

    // Returns if the word is in the data structure. A word could
    // contain the dot character '.' to represent any one letter.
    public boolean search(String word) {
        return searchhelper(0, word.toCharArray(), root);
    }
    
    private boolean searchhelper( int index, char[] chars,TrieNode parent){
    	if (index == chars.length){
    		if (parent.isWord){
    			return true;
    		}
    		return false;
    	}
    	char c = chars[index];
    	if (c == '.'){
	    	for (TrieNode tn: parent.nexts.values()){
	    		if (tn !=null){
	    			if (searchhelper( index+1,chars, tn)){
	    				return true;
	    			}
	    		}
	    	}
	    	return false;
    	}
    	TrieNode node = parent.nexts.get(c);
    	if (node == null){
    		return false;
    	}
    	return searchhelper(++index,chars, node);
    }
}

class TrieNode {
    boolean isWord;
    HashMap<Character, TrieNode> nexts;

    public TrieNode() {
        nexts = new HashMap<Character, TrieNode>();
    }
}
// Your WordDictionary object will be instantiated and called as such:
// WordDictionary wordDictionary = new WordDictionary();
// wordDictionary.addWord("word");
// wordDictionary.search("pattern");
