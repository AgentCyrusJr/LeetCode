Given an array of numbers nums, in which exactly two elements appear only once and all the other elements appear exactly twice. Find the two elements that appear only once.

For example:

Given nums = [1, 2, 1, 3, 2, 5], return [3, 5].

Note:
The order of the result is not important. So in the above example, [5, 3] is also correct.
Your algorithm should run in linear runtime complexity. Could you implement it using only constant space complexity?

=====================codes======================
public class Solution {
    public int[] singleNumber(int[] nums) {
        Arrays.sort(nums);
        int[] result = new int[2];
        int count = 0;
        for(int i = 0 ; i+1 < nums.length; i++){
        	if(nums[i] == nums[i+1]){ i++; }
        	else result[count++] = nums[i];
        }
        if(nums[nums.length-1]!=nums[nums.length-2]){
        	result[count] = nums[nums.length-1];
        }
        return result;
    }
}


=============================
//brilliant solution using bit manipulation
//by vishalhemnani

//Find the rightmost set bit, divide numbers into two groups. Each group will end up being one unique number.
public int[] singleNumber(int[] nums) {
    int result[] = new int[2];        
    int xor = nums[0];
    for (int i=1; i<nums.length; i++)
    {
        xor ^= nums[i];
    }
    
    //find the rightmost 'one', telling the difference between two unique numbers
    int bit = xor & ~(xor-1);
    
    int num1 = 0;
    int num2 = 0;
    
    //iterate nums again to divide the group into two, each with one unique number
    for (int num : nums)
    {
        if ((num & bit) > 0)
        {
            //group1
            num1 ^= num;
        }
        else
        {
            //group2
            num2 ^= num;
        }
    }
    
    result[0] = num1;
    result[1] = num2;
    return result;
}
