Given an integer array, your task is to find all the different possible increasing subsequences of the given array, and the length of an increasing subsequence should be at least 2 .

Example:
Input: [4, 6, 7, 7]
Output: [[4, 6], [4, 7], [4, 6, 7], [4, 6, 7, 7], [6, 7], [6, 7, 7], [7,7], [4,7,7]]
Note:
The length of the given array will not exceed 15.
The range of integer in the given array is [-100,100].
The given array may contain duplicates, and two equal integers should also be considered as a special case of increasing sequence.
=======================================
Backtracking:
if nums[i] is greater than or equal to the last element in the temp_list, we add nums[i] to the temp_list
and move to the next index in the array.
Each time check if the list size is greater or equal to 2, use set to store the result to avoid the dups

Similar problem: https://github.com/AgentCyrusJr/LeetCode/blob/master/77.%20Combinations

Time: O(2^N)
Space: O(N)
================codes==================
class Solution {
    public List<List<Integer>> findSubsequences(int[] nums) {
        HashSet<List<Integer>> set = new HashSet<>();
        helper(set, nums, new ArrayList<Integer>(), 0);
        return new ArrayList<>(set);
    }
    
    public void helper(HashSet<List<Integer>> set, int[] nums, List<Integer> temp_list, int index){
        if(temp_list.size() > 1){
            set.add(new ArrayList<Integer>(temp_list));
        }
        
        for(int i = index ; i < nums.length; i++){
            if(temp_list.size() == 0 || temp_list.get(temp_list.size() - 1) <= nums[i]){
                temp_list.add(nums[i]);
                helper(set, nums, temp_list, i + 1);
                temp_list.remove(temp_list.size()-1);
            }
        }
    }
}
