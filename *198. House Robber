You are a professional robber planning to rob houses along a street. Each house has a certain amount of money stashed, the only constraint stopping you from robbing each of them is that adjacent houses have security system connected and it will automatically contact the police if two adjacent houses were broken into on the same night.

Given a list of non-negative integers representing the amount of money of each house, determine the maximum amount of money you can rob tonight without alerting the police.

==============================coedes===========================
//unsolved
package leetcode;





import java.util.ArrayDeque;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Deque;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;
import java.util.Random;
import java.util.Set;

public class Solution1 {
	
public int rob(int[] nums) {
		if(nums.length%2 != 0 ){
			nums[nums.length-3] += nums[nums.length-1];
		}
        int large_sum = 0 ;
        int small_sum = 0;
        int large_index = 0, small_index = 0; 
        int finalIndex = 0;
        int[] sum1 = new int[2];
        int[] sum2 = new int[2];
        for(int i = 1; i < nums.length; i = i + 2){ 
       		if(sum1[1] == i-2){
       			large_sum = large_sum + nums[i];
       			small_sum = small_sum + nums[i-1];
       			if(large_sum < small_sum){
       				int temp = 0;
       				temp = small_sum;
       				small_sum = large_sum;
       				large_sum = temp;
       				
       				large_index = i-1;
       				small_index = i;
       			}
       			else{
       				large_index = i;
       				small_index = i-1;
       			}	
       		}else if(nums[i-1]>=nums[i]){
       				large_sum = large_sum + nums[i-1];
       				small_sum = small_sum + nums[i];
       				large_index = i-1;
       				small_index = i;
       			}else{
       				large_sum = large_sum + nums[i];
       				small_sum = small_sum + nums[i-1];
       				large_index = i;
       				small_index = i-1;
        	}
       		sum1[0] = large_sum; sum1[1] = large_index;
            sum2[0] = small_sum; sum2[1] = small_index;
            if(i+3 == nums.length-1){
        		if(i == large_index){
        			if(2*nums[nums.length-1]>=nums[nums.length-2]+nums[nums.length-3]){
        				System.out.println(sum1[0]);
        				sum1[0] += nums[nums.length-1];
        				break;
        			}
        		}
        	}
        }
        System.out.println(sum1[0]);		
       	return sum1[0]; 	
    }

	public static void main(String[] args){
		Solution1 s1 = new Solution1();
		int length  = 6;
		int[] array = new int[length];
		for(int i = 0 ; i < length; i++){
			array[i] = (int)(Math.random()*10);
			System.out.print(array[i]+" ");
		}
		int[] array2 = {6,8,0,2,5,1};
		System.out.println();
		System.out.println("Max amount I can rob:");
		s1.rob(array2);
//		int ress = s1.c(10,2);

		
	}
}
