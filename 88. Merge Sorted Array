Given two sorted integer arrays nums1 and nums2, merge nums2 into nums1 as one sorted array.

Note:
You may assume that nums1 has enough space (size that is greater or equal to m + n) to hold additional elements from nums2. The number of elements initialized in nums1 and nums2 are m and n respectively.

=========codes start from here============
public class Solution {
    public void merge(int[] nums1, int m, int[] nums2, int n) {
        int [] num = new int[m+n];
        int i=0, j=0;
        for(int k = 0 ; k < m+n ; k++){
        	if(i == m){
        		num[k] = nums2[j];
        		j++;
        		continue;
        	}
        	if(j == n){
        		num[k] = nums1[i];
        		i++;
        		continue;
        	}
        	if(nums1[i]<=nums2[j]){
        		num[k] = nums1[i];
        		i++;
        	}
        	else if(nums1[i]>=nums2[j]){
        		num[k] = nums2[j];
        		j++;
        	}
        }
        int index = 0;
        for(int number : num){
        	nums1[index] = number;
        	index++;
        }
    }
}

//This one is faster
//by casegame
public void merge(int[] nums1, int m, int[] nums2, int n) {
    int i=m-1, j=n-1, index=m+n-1;
    while(i>=0 && j>=0){
        nums1[index--] = nums1[i] > nums2[j]? nums1[i--]:nums2[j--];
    }
    while(j>=0)
        nums1[index--] = nums2[j--];
}

//This one is easier
//by Waxc 
public class Solution {
  public void merge(int[] nums1, int m, int[] nums2, int n) {
    for(int i=0; i<n; i++) nums1[m+i] = nums2[i];
      Arrays.sort(nums1);
  }
}
