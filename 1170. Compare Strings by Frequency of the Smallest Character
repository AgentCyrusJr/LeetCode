Let's define a function f(s) over a non-empty string s, which calculates the frequency of the smallest character in s. For example, if s = "dcce" then f(s) = 2 because the smallest character is "c" and its frequency is 2.

Now, given string arrays queries and words, return an integer array answer, where each answer[i] is the number of words such that f(queries[i]) < f(W), where W is a word in words.

 

Example 1:

Input: queries = ["cbd"], words = ["zaaaz"]
Output: [1]
Explanation: On the first query we have f("cbd") = 1, f("zaaaz") = 3 so f("cbd") < f("zaaaz").
Example 2:

Input: queries = ["bbb","cc"], words = ["a","aa","aaa","aaaa"]
Output: [1,2]
Explanation: On the first query only f("bbb") < f("aaaa"). On the second query both f("aaa") and f("aaaa") are both > f("cc").
 

Constraints:

1 <= queries.length <= 2000
1 <= words.length <= 2000
1 <= queries[i].length, words[i].length <= 10
queries[i][j], words[i][j] are English lowercase letters.
=============================================================
We can perform a bs search at the end to improve the time complexity to O(NlgM)

Time: O(N^M)
Space: O(N+M)
=============================code============================
class Solution {
    public int[] numSmallerByFrequency(String[] queries, String[] words) {
        int[] query_map = new int[queries.length];
        int[] word_map = new int[words.length];
        
        for(int i = 0 ; i < queries.length; i++){
            query_map[i] = f(queries[i]); 
        }
        
        for(int i = 0 ; i < words.length; i++){
            word_map[i] = f(words[i]); 
        }
        
        int[] res = new int[queries.length];

        for(int i = 0 ; i < queries.length; i++){
            for(int j = 0 ; j < words.length; j++){
                if(query_map[i] <  word_map[j]){
                    res[i]++;
                }
            } 
        }
        return res;
    }
    
    public int f(String string){
        int[] map = new int[26];
        
        for(char ch: string.toCharArray()){
            map[ch - 'a']++;
        }
        
        for(int i = 0 ; i < 26; i++){
            if(map[i] > 0){
                return map[i];
            }
        }
        
        return -1;
    }
}
