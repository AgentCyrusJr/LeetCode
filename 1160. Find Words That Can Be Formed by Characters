You are given an array of strings words and a string chars.

A string is good if it can be formed by characters from chars (each character can only be used once).

Return the sum of lengths of all good strings in words.

 

Example 1:

Input: words = ["cat","bt","hat","tree"], chars = "atach"
Output: 6
Explanation: 
The strings that can be formed are "cat" and "hat" so the answer is 3 + 3 = 6.
Example 2:

Input: words = ["hello","world","leetcode"], chars = "welldonehoneyr"
Output: 10
Explanation: 
The strings that can be formed are "hello" and "world" so the answer is 5 + 5 = 10.
 

Note:

1 <= words.length <= 1000
1 <= words[i].length, chars.length <= 100
All strings contain lowercase English letters only.

=========================================================
Initialize the chars map

for each strings in words array, we break each string into an array,
and compare with the initial array, if any letter used in the string
is greater than it does in the initiative map, set the flag to be false,

M: average length of each string, N: size of words, 
Time: O(MN)
Space: O(1)  26 (for the chars) + 26 (for each string in the words)

=========================code============================
class Solution {
    public int countCharacters(String[] words, String chars) {
        int[] map = new int[26];
        for(char c: chars.toCharArray()){
            map[c-'a']++;
        }
        
        int total = 0;
        int[] map2;
        for(String s: words){
            map2 = new int[26];
            boolean canBeFormed = true;
            for(char c: s.toCharArray()){
                map2[c - 'a']++;
                if(map[c - 'a'] < map2[c-'a']){
                    canBeFormed = false;
                    break;
                }
            }
            if(canBeFormed){
                total += s.length();
            }
        }
        return total;
    }
}
