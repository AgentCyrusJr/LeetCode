Given a non-empty string s and an abbreviation abbr, return whether the string matches with the given abbreviation.

A string such as "word" contains only the following valid abbreviations:

["word", "1ord", "w1rd", "wo1d", "wor1", "2rd", "w2d", "wo2", "1o1d", "1or1", "w1r1", "1o2", "2r1", "3d", "w3", "4"]
Notice that only the above abbreviations are valid abbreviations of the string "word". Any other string is not a valid abbreviation of "word".

Note:
Assume s contains only lowercase letters and abbr contains only lowercase letters and digits.

Example 1:
Given s = "internationalization", abbr = "i12iz4n":

Return true.
Example 2:
Given s = "apple", abbr = "a2e":

Return false.
===================code====================
class Solution {
    public boolean validWordAbbreviation(String word, String abbr) {
        int wordIndex = 0;
        int i = 0;
        for(; i < abbr.length(); i++){
            if(Character.isDigit(abbr.charAt(i))){
                int count = 1;
                int num = 0;
                while(Character.isDigit(abbr.charAt(i))){
                    
                    num = count*num + (abbr.charAt(i)-'0');
                    if(num == 0) return false;
                    i++; count *= 10; 
                    if(i == abbr.length()) break;
                }
                wordIndex += num;
                if(wordIndex == word.length() && i == abbr.length()) return true;
                i--;
            }else{
                if(wordIndex >= word.length() || i>=abbr.length()) return false;
                if(word.charAt(wordIndex) != abbr.charAt(i)){
                    return false;
                }
                wordIndex++;
            }
        }
        return wordIndex == word.length() && i == abbr.length();
    }
}
