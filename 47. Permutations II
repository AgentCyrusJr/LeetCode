Given a collection of numbers that might contain duplicates, return all possible unique permutations.

For example,
[1,1,2] have the following unique permutations:
[
  [1,1,2],
  [1,2,1],
  [2,1,1]
]
==============codes==============
public class Solution {
    List<List<Integer>> list;
	public List<List<Integer>> permuteUnique(int[] nums) {
		List<List<Integer>> list = new ArrayList<List<Integer>>();
	    List<Integer> integer = new ArrayList<Integer>();
	    boolean[] isVisit = new boolean[nums.length];
        for(int  i = 0 ; i < nums.length; i++){
        	isVisit[i] = false;
        }
        Arrays.sort(nums);
        this.bt(nums, integer, isVisit, list);
        // for(List<Integer> ll : list){
        // 	for(int i: ll){
        // 		System.out.print(i+",");
        // 	}
        // 	System.out.println();
        // }
        return list;
    }
	
	public void bt(int[] nums, List<Integer> integer, boolean[] isVisit, List<List<Integer>> list){
		if(integer.size() == nums.length){
			list.add(new ArrayList<Integer>(integer));
			return;
		}
		
		for(int i = 0 ; i < nums.length; i++){
			if(isVisit[i]==false){
				isVisit[i]=true;
				integer.add(nums[i]);
				this.bt(nums, integer, isVisit, list);
				isVisit[i]=false;
				integer.remove(integer.size()-1);
				while(i+1 < nums.length && nums[i+1] == nums[i]){
					i++;
				}
			}	
		}
	}
}
