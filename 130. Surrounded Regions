Given a 2D board containing 'X' and 'O' (the letter O), capture all regions surrounded by 'X'.

A region is captured by flipping all 'O's into 'X's in that surrounded region.

For example,
X X X X
X O O X
X X O X
X O X X
After running your function, the board should be:

X X X X
X X X X
X X X X
X O X X
===============codes=============
public class Solution {
    int m;
	int n;
    public void solve(char[][] board) {
        if(board.length == 0) return;
		m = board.length;
		n = board[0].length;
		
		for(int j = 0; j<n;j++){
			if(board[0][j]=='O'){
				dfs(board, 0, j);
			}
		}
		for(int j = 0; j<n;j++){
			if(board[m-1][j]=='O'){
				dfs(board, m-1, j);
			}
		}
		for(int i = 0; i<m;i++){
			if(board[i][0]=='O'){
				dfs(board, i, 0);
			}
		}
		for(int i = 0; i<m;i++){
			if(board[i][n-1]=='O'){
				dfs(board, i, n-1);
			}
		}

		for(int i = 0; i < m ; i ++){
			for(int j = 0 ; j < n ; j++){
				
					if(board[i][j]=='*'){
					    board[i][j]='O';
					}else
					    board[i][j]='X';
				
			}
		}
    }
	
	public void dfs(char[][] board, int i, int j){
	
    	if (board[i][j] == 'O')
	    	board[i][j] = '*';
	    if (i > 1 && board[i-1][j] == 'O')
	    	dfs(board,i-1, j);
	    if (i < board.length - 2 && board[i+1][j] == 'O')
		    dfs(board, i+1, j);
	    if (j > 1 && board[i][j-1] == 'O')
		    dfs(board, i, j-1);
	    if (j < board[i].length - 2 && board[i][j+1] == 'O' )
		    dfs(board, i, j+1);
	}
}
