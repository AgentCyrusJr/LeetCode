Find the contiguous subarray within an array (containing at least one number) which has the largest sum.

For example, given the array [-2,1,-3,4,-1,2,1,-5,4],
the contiguous subarray [4,-1,2,1] has the largest sum = 6.
========================================
For solving this problem, we only need to check if sum is greater than nums[i],
if not, we update the sum as nums[i],
at the end of each loop, we update the current_max with sum.

Follow-up for this question could be asking to output the subarray.
What we need to add upon this solution is having a potential_start and an actual start
We update potential_start every time sum is less than the current nums[i]
if sum > res, we update the actual start and end
===================codes=================
class Solution {
    public int maxSubArray(int[] nums) {
        if(nums == null || nums.length == 0){
            return 0;
        }
        
        int res = nums[0], sum = nums[0], potential_start = 0, end = 0, start = 0;
        
        for(int i = 1; i < nums.length; i++){
            sum += nums[i];
            if(sum < nums[i]){
                sum = nums[i];
                potential_start = i;
            }
            
            if(sum > res){
                start = potential_start;
                end = i;
                res = sum;
            }
        }
        
        System.out.println("This subarray starts from " + start + " to " + end + ".");
        
        return res;
    }
}
