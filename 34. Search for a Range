Given a sorted array of integers, find the starting and ending position of a given target value.

Your algorithm's runtime complexity must be in the order of O(log n).

If the target is not found in the array, return [-1, -1].

For example,
Given [5, 7, 7, 8, 8, 10] and target value 8,
return [3, 4].
==================codes=================
public class Solution {
    public int[] searchRange(int[] nums, int target) {
        int low = 0; 
        int high = nums.length-1;
        int mid = 0; 
        boolean find = false;
        
        while(low<=high){
        	mid = (low+high)>>>1;
        	if(nums[mid]==target){
        		find = true;
        		break;
        	}else if(nums[mid]>target){
        		high = mid - 1;
        	}else
        		low = mid+1;
        }
        if(!find){
        	int[] array = {-1,-1};
        	return array;
        }else{
        	int i = mid-1;
        	while(i>=0 && nums[i]==target){
        		i--;
        	}
        	int j = mid+1;
        	while(j<= nums.length-1 && nums[j] == target){
        		j++;
        	}

        	int[] array = {Math.max(0,i+1), Math.min(nums.length-1, j-1)};
        	return array;
        }
    }
}
