Given a string s, partition s such that every substring of the partition is a palindrome.

Return all possible palindrome partitioning of s.

For example, given s = "aab",
Return

[
  ["aa","b"],
  ["a","a","b"]
]
=====================codes========================
class Solution {
    List<List<String>> res;
    public List<List<String>> partition(String s) {
        res = new ArrayList<List<String>>();
        List<String> list = new ArrayList<String>();
        dfs(s, 0, list);
        return res;
    }
    
    public void dfs(String s, int start, List<String> list){
        if(start>=s.length()){
            res.add(new ArrayList<String>(list));
            return;
        }
        for(int i = start; i<s.length(); i++){
            if(isPalindrome(s.substring(start, i+1))){
                list.add(s.substring(start, i+1));
                dfs(s, i+1, list);
                list.remove(list.size()-1);
            }
        }
    }
    
    public boolean isPalindrome(String s){
        int i = 0, j = s.length()-1;
        while(i < j){
            if(s.charAt(i++) != s.charAt(j--)) return false;
            
        }
        return true;
    }
}
