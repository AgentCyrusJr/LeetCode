Serialization is the process of converting a data structure or object into a sequence of bits so that it can be stored in a file or memory buffer, or transmitted across a network connection link to be reconstructed later in the same or another computer environment.

Design an algorithm to serialize and deserialize a binary tree. There is no restriction on how your serialization/deserialization algorithm should work. You just need to ensure that a binary tree can be serialized to a string and this string can be deserialized to the original tree structure.

Example: 

You may serialize the following tree:

    1
   / \
  2   3
     / \
    4   5

as "[1,2,3,null,null,4,5]"
Clarification: The above format is the same as how LeetCode serializes a binary tree. You do not necessarily need to follow this format, so please be creative and come up with different approaches yourself.

Note: Do not use class member/global/static variables to store states. Your serialize and deserialize algorithms should be stateless.
========================================
BFS

serialize as 1,2,3,#,#,4,5,
if the node is not #, append the val, to the stringbuilder,
otherwise append the #,

deserialize 
split the string with the delimiter of ','
if the left and right is not #, create the node with the val,
and node.left = left, node.right = right

Time: O(N)
Space: O(N)
=================code===================
/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
public class Codec {

    // Encodes a tree to a single string.
    public String serialize(TreeNode root) {
        if(root == null){
            return "";
        }
        
        StringBuilder sb = new StringBuilder();
        Queue<TreeNode> queue = new LinkedList<>();
        
        queue.add(root);
        while(!queue.isEmpty()){
            TreeNode node = queue.poll();
            if(node == null){
                sb.append("#,");
                continue;
            }
            
            sb.append(node.val+",");
            queue.add(node.left);
            queue.add(node.right);
        }
        
        return sb.toString();
    }

    // Decodes your encoded data to tree.
    public TreeNode deserialize(String data) {
        if(data == ""){
            return null;
        }
        String[] nodes = data.split(",");
        
        Queue<TreeNode> queue = new LinkedList<TreeNode>();
        int index = 0;
        TreeNode root = new TreeNode(Integer.parseInt(nodes[index]));
        queue.add(root);
        
        while(!queue.isEmpty()){
            TreeNode node = queue.poll();
            String left = nodes[++index];
            String right = nodes[++index];
            
            if(!left.equals("#")){
                node.left = new TreeNode(Integer.parseInt(left));
                queue.add(node.left);
            }
            
            if(!right.equals("#")){
                node.right = new TreeNode(Integer.parseInt(right));
                queue.add(node.right);
            }
        }
        
        return root;
    }
}

// Your Codec object will be instantiated and called as such:
// Codec codec = new Codec();
// codec.deserialize(codec.serialize(root));
