Given an unsorted array of integers, find the number of longest increasing subsequence.

Example 1:
Input: [1,3,5,4,7]
Output: 2
Explanation: The two longest increasing subsequence are [1, 3, 4, 7] and [1, 3, 5, 7].
Example 2:
Input: [2,2,2,2,2]
Output: 5
Explanation: The length of longest continuous increasing subsequence is 1, and there are 5 subsequences' length is 1, so output 5.
Note: Length of the given array will be not exceed 2000 and the answer is guaranteed to be fit in 32-bit signed int.
==============================================================
Similar to find the LIS, we need to have another dp array to store the number of LIS so far til nums[i]
if the max get updated, we need to update the count array as well,
else if the new value is the same as the max, we need to add that amount of count to the current count[i]
=> count[i] += count[j];

Time: O(N^2)
Space: O(N)
======================code====================================
class Solution {
    public int findNumberOfLIS(int[] nums) {
        int[] dp = new int[nums.length];
        int[] count = new int[nums.length];
        Arrays.fill(dp, 1);
        Arrays.fill(count, 1);
        
        int max = 1;
        for(int i = 0 ; i < nums.length; i++){
            for(int j = 0 ; j < i; j++){
                if(nums[j] < nums[i]){
                    
                    if(dp[i] < dp[j] + 1){
                        dp[i] = dp[j] + 1;
                        count[i] = count[j];
                    }else if(dp[i] == dp[j]+1){
                        count[i] += count[j];
                    }
                }
                
                max = Math.max(dp[i], max);
            }
        }
        
        int res = 0;
        for(int i = 0 ; i < count.length; i++){
            if(dp[i] == max){
                res += count[i];
            }
        }
        
        return res;
    }
}
