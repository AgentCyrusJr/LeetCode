Given a non-empty string check if it can be constructed by taking a substring of it and appending multiple copies of the substring together. You may assume the given string consists of lowercase English letters only and its length will not exceed 10000.

Example 1:
Input: "abab"

Output: True

Explanation: It's the substring "ab" twice.
Example 2:
Input: "aba"

Output: False
Example 3:
Input: "abcabcabcabc"

Output: True

Explanation: It's the substring "abc" four times. (And the substring "abcabc" twice.)
===========codes==========
public class Solution {
    public boolean repeatedSubstringPattern(String str) {
        int len = str.length();
        for(int i = 1; i<=len/2; i++){
        	String check = str.substring(0, i);
        	for(int j =i; j< len && j+i<=len; j = j+i){
        	    //each time I construct a string with i length starting from j
        		String c = str.substring(j, j+i);
        		//check if the string equals to the original string
        		if(check.equals(c)){
        			if(j+i == len) return true;
        			continue;
        		}else
        			break;
        	}
        }
        return false;
    }
}
