Given two words (beginWord and endWord), and a dictionary's word list, find the length of shortest transformation sequence from beginWord to endWord, such that:

Only one letter can be changed at a time
Each intermediate word must exist in the word list
For example,

Given:
beginWord = "hit"
endWord = "cog"
wordList = ["hot","dot","dog","lot","log"]
As one shortest transformation is "hit" -> "hot" -> "dot" -> "dog" -> "cog",
return its length 5.
=====================================
BFS

use a set to track the words available

using a queue to to level first first, starting from the start word, we check if after changing one char, 
the changed word is in the set or not, if it exists, we remove it from the set to avoid finding it again 
in the future. Keep searching until we find the endWord, otherwise return 0;

Time: O(26*l*n)  ->  l is endWord.length(), n is the size of the wordList
Space: O(n)
===============codes=================
// This problem is basically the same as 433. Minimum Genetic Mutation 
public int ladderLength(String beginWord, String endWord, Set<String> wordList) {
    wordList.add(endWord);
    Queue<String> queue = new LinkedList<String>();
    queue.add(beginWord);
    int level = 0;
    while(!queue.isEmpty()){
        int size = queue.size();
        for(int i = 0; i < size; i++){
            String cur = queue.remove();
            if(cur.equals(endWord)){ return level + 1;}
            for(int j = 0; j < cur.length(); j++){
                char[] word = cur.toCharArray();
                for(char ch = 'a'; ch < 'z'; ch++){
                    word[j] = ch;
                    String check = new String(word);
                    //check whether the wordList contains the modified word
                    //if so, we push the modified word in the queue and also remove it from the wordList
                    //There exists the possibility that there are multiple choices after single word(more like LFS)
                    if(!check.equals(cur) && wordList.contains(check)){
                        queue.add(check);
                        wordList.remove(check);
                    }
                }
            }
        }
        level++;
    }
    return 0;
}
=============================2019/11/10=================================
class Solution {
    public int ladderLength(String beginWord, String endWord, List<String> wordList) {
        Set<String> set = new HashSet<>();
        set.addAll(wordList);
        
        int level = 0;
        if(!set.contains(endWord)){
            return 0;
        }
        
        Queue<String> q = new LinkedList<>();
        q.add(beginWord);
        
        while(!q.isEmpty()){
            level++;
            int size = q.size();
            for(int k = 0 ; k < size; k++){
                String s = q.poll();
                
                for(int i = 0; i< s.length(); i++){
                    String dup = new String(s);
                    for(char j = 'a' ; j <= 'z'; j++){
                        StringBuilder sb = new StringBuilder(s);
                        sb.setCharAt(i, j);
                        s = sb.toString();
                        if(s.equals(endWord)){
                            return level+1;
                        }
                        
                        if(!set.contains(s)) continue;
                        
                        set.remove(s);
                        
                        q.add(s);
                    }
                    s = dup;
                }
            } 
        }
        return 0;
    }
}
