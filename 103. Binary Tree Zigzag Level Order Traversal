Given a binary tree, return the zigzag level order traversal of its nodes' values. (ie, from left to right, then right to left for the next level and alternate between).

For example:
Given binary tree [3,9,20,null,null,15,7],
    3
   / \
  9  20
    /  \
   15   7
return its zigzag level order traversal as:
[
  [3],
  [20,9],
  [15,7]
]
================codes==============
//by biolearning 
public class Solution {
    public List<List<Integer>> zigzagLevelOrder(TreeNode root) {
        List<List<Integer>> res = new LinkedList<List<Integer>>();
        int level = 0;
        Queue<TreeNode> queue = new LinkedList<TreeNode>();
        if (root != null) queue.offer(root);
        
        while (!queue.isEmpty()) {
            int size = queue.size();
            LinkedList<Integer> l = new LinkedList<Integer>();
            for (int i = 0; i < size; i++) {
                TreeNode t = queue.poll();
                if (t.left != null) queue.offer(t.left);
                if (t.right != null) queue.offer(t.right);
                if (level%2 == 1) {
                    l.addFirst(new Integer(t.val));
                }else {
                    l.offer(new Integer(t.val));
                }
            }
            level++;
            res.add(l);
        }
        return res;
    }
}
==================2017/10/25=================
/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
class Solution {
    List<List<Integer>> res = new ArrayList<List<Integer>>();
    public List<List<Integer>> zigzagLevelOrder(TreeNode root) {
        if(root == null) return res;
        LinkedList<TreeNode> list1 = new LinkedList<TreeNode>();
        LinkedList<TreeNode> list2 = new LinkedList<TreeNode>();
        List<Integer> result = new ArrayList<Integer>();
        list1.add(root); result.add(root.val);
        res.add(result);
        int level = 2;
        result = new ArrayList<Integer>();
        while(list1.size() != 0){
            TreeNode tn = list1.poll();
            if(tn.left != null){
                list2.add(tn.left);
                result.add(tn.left.val);
            }
            if(tn.right != null ){
                list2.add(tn.right);
                result.add(tn.right.val);
            }
                
            if(list1.size() == 0){
                if(list2.size() == 0) break;
                list1 = list2;
                
                if(level%2 == 0){
                    Collections.reverse(result);
                    res.add(result);
                }else{
                    res.add(result);
                }
                result = new ArrayList<Integer>();
                list2 = new LinkedList<TreeNode>();
                level ++;
            }
        }
        return res;
    }
}
