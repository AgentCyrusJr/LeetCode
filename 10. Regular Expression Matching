Implement regular expression matching with support for '.' and '*'.

'.' Matches any single character.
'*' Matches zero or more of the preceding element.

The matching should cover the entire input string (not partial).

The function prototype should be:
bool isMatch(const char *s, const char *p)

Some examples:
isMatch("aa","a") → false
isMatch("aa","aa") → true
isMatch("aaa","aa") → false
isMatch("aa", "a*") → true
isMatch("aa", ".*") → true
isMatch("ab", ".*") → true
isMatch("aab", "c*a*b") → true
==============codes==============
//This java code might not be valid after the updates on corner cases!
Solution link: https://www.youtube.com/watch?v=ZLH8Gp2_d8g
public class Solution {
    public boolean isMatch(String s, String p) {
	    if (s == null || p == null) return false;
	    boolean[][] dp = new boolean[s.length()+1][p.length()+1];
	    dp[0][0] = true;
	    for (int i = 1; i < dp[0].length; i++) {
            if (p.charAt(i-1) == '*') {
                dp[0][i] = dp[0][i-2];
            }
        }
	    for (int i = 1 ; i < dp.length; i++) {
	        for (int j = 1; j < dp[0].length; j++) {
	            if (p.charAt(j-1) == '.' || p.charAt(j-1) == s.charAt(i-1)) {
	                dp[i][j] = dp[i-1][j-1];
	            }
	            else if(p.charAt(j-1) == '*') {
	                dp[i][j] = dp[i][j-2];
	                if (p.charAt(j-2) == s.charAt(i-1) || p.charAt(j-2) == '.') {
	                    dp[i][j] = dp[i-1][j] | dp[i][j];
	                }
	            }else{
	                dp[i][j] =false;
	            }
	        }
	    }
	    return dp[s.length()][p.length()];
	}
}

==================Python===================
Explanation: First we init a two-dim arr, with length of len(s)+1 and len(p)+1. 
During the traversal, each time, there is a prefect match or p[i]=='.', dp[i][j] = dp[i-1][j-1],  if p[i] == '*', we check if the one before its previous one is a match, dp[i][j] = dp[i][j-2], furthermore, if the previous one matches s[i], dp[i][j] = dp[i-1][j] or dp[i][j], else, dp[i][j] = False. Finally,we return dp[len(s)][len(p)]

tips:
1. Don't forget about tricky corner case
2. We have to init the first row of the dp matrix. If p[i] == '*', we need to consider the case, '*' represents zero of the preceding elements. Hence, in this case,dp[0][i] = dp[0][i-2]
============2017/8/1============
class Solution(object):
    def isMatch(self, s, p):
        """
        :type s: str
        :type p: str
        :rtype: bool
        """
        if len(p) == 0:
            if len(s) == 0: return True
            else:
                return False
        dp = [[False for col in range(len(p)+1)] for row in range(len(s)+1)]
        dp[0][0] = True
        for i in range(1, len(p)+1):
            if p[i-1] == '*':
                dp[0][i] = dp[0][i-2]
                
        for i in range(1, len(s) + 1):
            for j in range(1, len(p) + 1):
                if p[j-1] == '.' or p[j-1] == s[i-1]:
                    dp[i][j] = dp[i-1][j-1]
                elif p[j-1] == '*':
                    dp[i][j] = dp[i][j-2]
                    if p[j-2] == '.' or p[j-2] == s[i-1]:
                        dp[i][j] = dp[i][j] or dp[i-1][j]
                else:
                    dp[i][j] = False
        
        return dp[len(s)][len(p)]
                
        
        
        
