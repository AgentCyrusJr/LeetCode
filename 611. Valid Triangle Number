Given an array consists of non-negative integers, your task is to count the number of triplets chosen from the array that can make triangles if we take them as side lengths of a triangle.

Example 1:
Input: [2,2,3,4]
Output: 3
Explanation:
Valid combinations are: 
2,3,4 (using the first 2)
2,3,4 (using the second 2)
2,2,3
Note:
The length of the given array won't exceed 1000.
The integers in the given array are in the range of [0, 1000].
==========codes========
class Solution {
    public int triangleNumber(int[] nums) {
        if(nums.length <= 2) return 0;
        Arrays.sort(nums);
        int count = 0;
        for(int i = 0; i<nums.length; i++){
            for(int j = i+1; j<nums.length; j++){
                for(int k = j+1; k<nums.length; k++){
                    if(isTriangleValid(nums[i], nums[j], nums[k])){
                        count++;
                    }else{
                        break;
                    }
                }
            }
            
        }
        return count;
    }
    
    private boolean isTriangleValid(int a, int b, int c) {
        if((a+b)>c && (a+c)>b && (b+c)>a) {
            return true;
        }else {
            return false;
        }

    }

}
