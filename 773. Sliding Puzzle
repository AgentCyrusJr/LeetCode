On a 2x3 board, there are 5 tiles represented by the integers 1 through 5, and an empty square represented by 0.

A move consists of choosing 0 and a 4-directionally adjacent number and swapping it.

The state of the board is solved if and only if the board is [[1,2,3],[4,5,0]].

Given a puzzle board, return the least number of moves required so that the state of the board is solved. If it is impossible for the state of the board to be solved, return -1.

Examples:

Input: board = [[1,2,3],[4,0,5]]
Output: 1
Explanation: Swap the 0 and the 5 in one move.
Input: board = [[1,2,3],[5,4,0]]
Output: -1
Explanation: No number of moves will make the board solved.
Input: board = [[4,1,2],[5,0,3]]
Output: 5
Explanation: 5 is the smallest number of moves that solves the board.
An example path:
After move 0: [[4,1,2],[5,0,3]]
After move 1: [[4,1,2],[0,5,3]]
After move 2: [[0,1,2],[4,5,3]]
After move 3: [[1,0,2],[4,5,3]]
After move 4: [[1,2,0],[4,5,3]]
After move 5: [[1,2,3],[4,5,0]]
Input: board = [[3,2,4],[1,5,0]]
Output: 14
Note:

board will be a 2 x 3 array as described above.
board[i][j] will be a permutation of [0, 1, 2, 3, 4, 5].
====================================
BFS
Swap the char next to zero based on the dir array.
eg, if curr string is 105432, the actual array is
{ 1, 0, 5 }
{ 4, 3, 2 }
So, according to the dir array, we can do swap on index 0, 2 and 4, which is '1', '5' and '3' respectively
Every time, we empty the queue, increment the step by one, because we perform one move.

The KEY for this question is to find the dir array which allow to perform a swap in a string format

R: #row, C: #col
Time: O((RC)!)
Space: O((RC)!)
=================codes==============
class Solution {
    public int slidingPuzzle(int[][] board) {
        Set<String> set = new HashSet<>();
        String start = "";
        for(int i = 0 ; i < 2; i++){
            for(int j = 0; j < 3; j++){
                start += board[i][j];
            }
        }
        if(start.equals("123450")) return 0;
        
        Queue<String> queue = new LinkedList<>();
        queue.add(start);
        int step = 0;
        int[][] dir = {{1, 3}, {0, 2, 4}, {1, 5}, {0, 4}, {1, 3, 5}, {2, 4}};
        
        while(!queue.isEmpty()){
            int size = queue.size();
            for(int i = 0 ; i < size; i++){
                String curr = queue.poll();
                if(curr.equals("123450")) return step;
                
                int index_of_zero = curr.indexOf('0');
                for(int k : dir[index_of_zero]){
                    String changed = swap(curr, index_of_zero, k);
                    if(set.add(changed)){
                        queue.add(changed);
                    }
                } 
            }
            step++;
        }
        
        return -1;
    }
    
    public String swap(String string, int i1, int i2){
        StringBuilder sb = new StringBuilder(string);
        sb.setCharAt(i1, string.charAt(i2));
        sb.setCharAt(i2, '0');
        
        return sb.toString();
    }
}
