A string S of lowercase letters is given. We want to partition this string into as many parts as possible so that each letter appears in at most one part, and return a list of integers representing the size of these parts.

Example 1:
Input: S = "ababcbacadefegdehijhklij"
Output: [9,7,8]
Explanation:
The partition is "ababcbaca", "defegde", "hijhklij".
This is a partition so that each letter appears in at most one part.
A partition like "ababcbacadefegde", "hijhklij" is incorrect, because it splits S into less parts.
Note:

S will have length in range [1, 500].
S will consist of lowercase letters ('a' to 'z') only.
================codes==============
class Solution {
    public List<Integer> partitionLabels(String S) {
        int[] map = new int[26];
        List<Integer> list = new ArrayList<Integer>();
        for(int i = S.length()-1; i>= 0; i--){
            if(map[S.charAt(i)-'a'] == 0) map[S.charAt(i)-'a'] = i;
        }
        int start = 0;
        int last = 0;
        for(int i = 0 ; i < S.length(); i++){
            last = Math.max(map[S.charAt(i)-'a'], last);
            if(last == i){
                list.add(i-start+1);
                start = i+1;
            }
        }
        return list;
    }
}
