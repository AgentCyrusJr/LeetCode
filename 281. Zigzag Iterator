Given two 1d vectors, implement an iterator to return their elements alternately.

For example, given two 1d vectors:

v1 = [1, 2]
v2 = [3, 4, 5, 6]
By calling next repeatedly until hasNext returns false, the order of elements returned by next should be: [1, 3, 2, 4, 5, 6].

Follow up: What if you are given k 1d vectors? How well can your code be extended to such cases?

Clarification for the follow up question - Update (2015-09-18):
The "Zigzag" order is not clearly defined and is ambiguous for k > 2 cases. If "Zigzag" does not look right to you, replace "Zigzag" with "Cyclic". For example, given the following input:

[1,2,3]
[4,5,6,7]
[8,9]
It should return [1,4,8,2,5,9,3,6,7].
===============codes================
public class ZigzagIterator {
    int len1,len2;
    List<Integer> list;
    int index = 0;
    public ZigzagIterator(List<Integer> v1, List<Integer> v2) {
        list = new ArrayList<Integer>();
        len1 = v1.size(); len2 = v2.size();
        int min = Math.min(len1, len2);
        for(int i = 0 ; i < min ; i++){
            list.add(v1.get(i));
            list.add(v2.get(i));
        }
        if(len1==min){
            for(int i = min; i< len2; i++){
                list.add(v2.get(i));
            }
        }else{
            for(int i = min; i< len1; i++){
                list.add(v1.get(i));
            }
        }
        
    }

    public int next() {
        return list.get(index++);
    }

    public boolean hasNext() {
        return index<list.size();
    }
}
