Given an array S of n integers, find three integers in S such that the sum is closest to a given number, target. Return the sum of the three integers. You may assume that each input would have exactly one solution.

For example, given array S = {-1 2 1 -4}, and target = 1.
The sum that is closest to the target is 2. (-1 + 2 + 1 = 2).
===============================================
Sort the array, find a fixed point, use the two sum and one-pass
the rest of the array. 

Time: O(N^2)
Space: O(N^2)
==============codes===============

public class Solution {
    public int threeSumClosest(int[] nums, int target) {
        Arrays.sort(nums);
        int min = Integer.MAX_VALUE;
        int res = 0;
        int length = nums.length;
		for(int i = 0 ; i < length; i++){
			for(int j = i+1 ; j < length; j ++){
				for(int k = j+1; k< length; k++ ){
					if(Math.abs(nums[i]+nums[j]+nums[k]-target)<min){
						min = Math.abs(nums[i]+nums[j]+nums[k]-target);
						res = nums[i]+nums[j]+nums[k];
						if(min == 0 ){
							return res;
						}
					}
				}
			}
		}
		return res;  
    }
}
=====================2019/12/04=======================
class Solution {
    public int threeSumClosest(int[] nums, int target) {
        Arrays.sort(nums);
        int min = Integer.MAX_VALUE, res = 0;
        
        for(int index = 0 ; index < nums.length-2; index++){
            int first = index+1, last = nums.length-1;
            while(first<last){
                int sum = nums[index] + nums[first] + nums[last];
            
                if(sum > target){
                    last--;
                }else{
                    first++;
                }
            
                if(Math.abs(sum - target) < min){
                    min = Math.abs(sum - target);
                
                    res = sum;
                }
            }
            
        }
        
        return res;
    }
}
