Given an integer matrix, find the length of the longest increasing path.

From each cell, you can either move to four directions: left, right, up or down. You may NOT move diagonally or move outside of the boundary (i.e. wrap-around is not allowed).

Example 1:

Input: nums = 
[
  [9,9,4],
  [6,6,8],
  [2,1,1]
] 
Output: 4 
Explanation: The longest increasing path is [1, 2, 6, 9].
Example 2:

Input: nums = 
[
  [3,4,5],
  [3,2,6],
  [2,2,1]
] 
Output: 4 
Explanation: The longest increasing path is [3, 4, 5, 6]. Moving diagonally is not allowed.
========================================
DFS + Cache

dfs every neighbors on each element, if its value has been calculated,
just return it w/o going to the dfs again. (caching)

Time: O(m*n)
Space: O(m*n)
==================code==================
class Solution {
    public int longestIncreasingPath(int[][] matrix) {
        if(matrix.length == 0) return 0;
        int max = 0;
        int[][] cache = new int[matrix.length][matrix[0].length];
        for(int i = 0 ; i < matrix.length; i++){
            for(int j = 0 ; j < matrix[i].length; j++){
                max = Math.max(1+dfs(matrix, i-1, j, matrix[i][j], cache), max);
                max = Math.max(1+dfs(matrix, i, j-1, matrix[i][j], cache), max);
                max = Math.max(1+dfs(matrix, i+1, j, matrix[i][j], cache), max);
                max = Math.max(1+dfs(matrix, i, j+1, matrix[i][j], cache), max);
            }
        }
        
        return max;
    }
    
    public int dfs(int[][] matrix, int i, int j, int current, int[][] cache){
        if(i < 0 || j < 0 || i >= matrix.length || j >= matrix[i].length || matrix[i][j] >= current){
            return 0;
        }
        
        if(cache[i][j]!=0){
            return cache[i][j];
        }
        
        int curr_max = dfs(matrix, i - 1, j, matrix[i][j], cache);
        curr_max = Math.max(curr_max, dfs(matrix, i, j - 1, matrix[i][j], cache));
        curr_max = Math.max(curr_max, dfs(matrix, i + 1, j, matrix[i][j], cache));
        curr_max = Math.max(curr_max, dfs(matrix, i, j + 1, matrix[i][j], cache));
        cache[i][j] = curr_max+1;
        
        return cache[i][j];
    }
}
