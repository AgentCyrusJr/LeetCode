A robot is located at the top-left corner of a m x n grid (marked 'Start' in the diagram below).

The robot can only move either down or right at any point in time. The robot is trying to reach the bottom-right corner of the grid (marked 'Finish' in the diagram below).

How many possible unique paths are there?
=============codes===============
//Mine has TLE problems
int count = 0;
	public int uniquePaths(int m, int n) {
		this.dy(0, 0, m, n);
        return count;
    }
	
	public void dy( int i, int j, int k, int l){
		if(i==k-1 && j == l-1){
			count++;
			return;
		}
		
		if(i < k-1){
			this.dy( i+1, j, k, l);
		}
			
		if(j < l-1){
			this.dy( i, j+1, k, l);
		}
	}
  
===================
//by dev.qiping.dong
public class Solution {
    public int uniquePaths(int m, int n) {
        /* 
        you should move (m-1)+(n-1) steps;
        since you only have 2 options for each step: right or down, you only need to choose (m-1) right steps or (n-1) down steps(these are equal). So we can choose the smaller one. 
        C( (m-1)+(n-1), min((m-1), (n-1))).
        */
        int d1 = m-1;
        int d2 = n-1;
        int total = d1+d2;
        int d = Math.min(d1, d2);
        long ans = 1;
        for(int i=total; i>total-d; i--){
            ans = ans*i;
        }
        for(int i=1; i<=d; i++){
            ans = ans/i;
        }
        return (int)ans;
    }
}
