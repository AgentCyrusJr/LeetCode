Reverse a linked list from position m to n. Do it in-place and in one-pass.

For example:
Given 1->2->3->4->5->NULL, m = 2 and n = 4,

return 1->4->3->2->5->NULL.

Note:
Given m, n satisfy the following condition:
1 ≤ m ≤ n ≤ length of list.
==========================codes======================
/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) { val = x; }
 * }
 */
public class Solution {
    public ListNode reverseBetween(ListNode head, int m, int n) {
	    if(head == null || head.next == null){return head;}
		ListNode current = head;
		ListNode prev = null, next = current.next;
		ListNode n1 = null,n2 = null;
		int index = 1;
		while(current != null){
			if(m < index && index <= n){
				next 		 = current.next;  
	            current.next = prev;  
	            prev	 	 = current;  
	            current 	 = next; 
	            if(index == n){
					if(m == 1){ head = prev; }
					else{ n1.next = prev; }
					n2.next = current;
					prev = n2;
					if(current != null) {
						current = current.next;	
					}else
						break;
				}
			}else{
				if(index == m){
					n1 = prev;
					n2 = current;
				}
				prev = current;
				current = next;
				if(current != null){
					next = current.next;
				}
			}
			index++;
		}
		return head;
	}
}

====================================
//Review later
//by ardyadipta
public ListNode reverseBetween(ListNode head, int m, int n) {
    if(head == null) return null;
    ListNode dummy = new ListNode(0); // create a dummy node to mark the head of this list
    dummy.next = head;
    ListNode pre = dummy; // make a pointer pre as a marker for the node before reversing
    for(int i = 0; i<m-1; i++) pre = pre.next;
    
    ListNode start = pre.next; // a pointer to the beginning of a sub-list that will be reversed
    ListNode then = start.next; // a pointer to a node that will be reversed
    
    // 1 - 2 -3 - 4 - 5 ; m=2; n =4 ---> pre = 1, start = 2, then = 3
    // dummy-> 1 -> 2 -> 3 -> 4 -> 5
    
    for(int i=0; i<n-m; i++)
    {
        start.next = then.next;
        then.next = pre.next;
        pre.next = then;
        then = start.next;
    }
    
    // first reversing : dummy->1 - 3 - 2 - 4 - 5; pre = 1, start = 2, then = 4
    // second reversing: dummy->1 - 4 - 3 - 2 - 5; pre = 1, start = 2, then = 5 (finish)
    
    return dummy.next;
    
}
