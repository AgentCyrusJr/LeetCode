Design a stack that supports push, pop, top, and retrieving the minimum element in constant time.

push(x) -- Push element x onto stack.
pop() -- Removes the element on top of the stack.
top() -- Get the top element.
getMin() -- Retrieve the minimum element in the stack.
Example:
MinStack minStack = new MinStack();
minStack.push(-2);
minStack.push(0);
minStack.push(-3);
minStack.getMin();   --> Returns -3.
minStack.pop();
minStack.top();      --> Returns 0.
minStack.getMin();   --> Returns -2.
================================codes=======================
class MinStack {
	Stack<Integer> stack = new Stack<Integer>();
	Stack<Integer> stack_copy = new Stack<Integer>();
	int min = Integer.MAX_VALUE;
    /** initialize your data structure here. */
    public MinStack() {
        
    }
    
    public void push(int x) {
        stack.push(x);
        if(!stack_only.isEmpty()){
            stack_copy.push(x);
            min = x;
        }else{
            if(min > x){
                min = x;
                stack_copy.push(min);
            }else
                stack_copy.push(stack_copy.peek())
        }
    }
    
    public void pop() {
    	if(stack.isEmpty() || stack.isEmpty()){
    		return;
    	}else{
    	    stack.pop();
    	    stack_copy.pop();
    	}
    }
    
    public int top() {
        if(stack.isEmpty()){
            return -1;
        }else
            return stack.peek();
    }
    
    public int getMin() {
        int res = stack_copy.peek();
        return res;
    }
}

/**
 * Your MinStack object will be instantiated and called as such:
 * MinStack obj = new MinStack();
 * obj.push(x);
 * obj.pop();
 * int param_3 = obj.top();
 * int param_4 = obj.getMin();
 */
