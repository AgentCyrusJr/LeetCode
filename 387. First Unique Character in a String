Given a string, find the first non-repeating character in it and return it's index. If it doesn't exist, return -1.

Examples:

s = "leetcode"
return 0.

s = "loveleetcode",
return 2.
Note: You may assume the string contain only lowercase letters.

=======================codes===========================
public int firstUniqChar(String s) {
		HashMap<Character, Integer> letterMap = new HashMap<Character, Integer>();
		char[] ch = s.toCharArray();
		int count,index = 0;
		for(char cc : ch){
			count = letterMap.getOrDefault(cc, 0)+1;
			letterMap.put(cc, count);
		}
		for(char cc : ch){
			if(letterMap.get(cc)==1){
				return index;
			}
			index++;
		}
		return -1;
    }
    
====================================
//by Fuhito
//by using an array to recording the number of each letter in String s
public class Solution {
    public int firstUniqChar(String s) {
        char[] arr = s.toCharArray();
        int[] temp = new int[26];
        
        for(int i : arr) temp[i - 'a']++;
        for(int i = 0; i < arr.length; i++){
            if(temp[arr[i] - 'a'] == 1) return   i;
        }
        return -1;
    }
}
