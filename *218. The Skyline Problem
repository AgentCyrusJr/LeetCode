//Explanation: https://briangordon.github.io/2014/08/the-skyline-problem.html
//solution link: http://yuanhsh.iteye.com/blog/2217735
public class Solution {
    public List<int[]> getSkyline(int[][] buildings) {  
    List<int[]> result = new ArrayList<>();  
    List<int[]> height = new ArrayList<>();  
    for(int[] b:buildings) {  
        height.add(new int[]{b[0], -b[2]});  
        height.add(new int[]{b[1], b[2]});  
    }  
    Collections.sort(height, new Comparator<int[]>(){  
        public int compare(int[] a, int[] b) {  
            if(a[0] != b[0]) return a[0] - b[0];  
            return a[1] - b[1];  
        }  
    });  
    //Always put the maximal in the front
    Queue<Integer> pq = new PriorityQueue<>(new Comparator<Integer>(){  
        public int compare(Integer a, Integer b) {  
            return b - a;  
        }  
    });  
    pq.offer(0);  
    int prev = 0;  
    for(int[] h:height) {  
        if(h[1] < 0) { //negative value represents input a building  
            pq.offer(-h[1]);  
        } else {  
            pq.remove(h[1]);  
        }  
        int cur = pq.peek();  
        if(prev != cur) {  
            result.add(new int[]{h[0], cur});  
            prev = cur;  
        }  
    }  
    return result;  
}
}
