Follow up for problem "Populating Next Right Pointers in Each Node".

What if the given tree could be any binary tree? Would your previous solution still work?

Note:

You may only use constant extra space.
For example,
Given the following binary tree,
         1
       /  \
      2    3
     / \    \
    4   5    7
After calling your function, the tree should look like:
         1 -> NULL
       /  \
      2 -> 3 -> NULL
     / \    \
    4-> 5 -> 7 -> NULL
============codes==============
/**
 * Definition for binary tree with next pointer.
 * public class TreeLinkNode {
 *     int val;
 *     TreeLinkNode left, right, next;
 *     TreeLinkNode(int x) { val = x; }
 * }
 */
public class Solution {
    public void connect(TreeLinkNode root) {
		if(root == null) return;
		Deque<TreeLinkNode> q = new LinkedList<TreeLinkNode>();
        q.add(root);
        while(!q.isEmpty()){
        	Deque<TreeLinkNode> q1 = new LinkedList<TreeLinkNode>();
        	while(!q.isEmpty()){
        	    TreeLinkNode n = q.poll();
            	if(q.isEmpty()){
            		n.next =null;
            	}else{
            		TreeLinkNode next = q.peek();
            		n.next = next;
            	}
            	if(n.left!=null) q1.offer(n.left);
            	if(n.right!=null)q1.offer(n.right);
        	}
        	q = q1;
        }
    }
}
