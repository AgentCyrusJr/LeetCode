 Given a string s and a dictionary of words dict, determine if s can be segmented into a space-separated sequence of one or more dictionary words.

For example, given
s = "leetcode",
dict = ["leet", "code"].

Return true because "leetcode" can be segmented as "leet code".
======================================
DP

dp[i][j] represents whether we could construct the s[i,j] exclusively using the words in dict

Time: O(L*L*L)
Space: O(L*L)
==================codes===============
class Solution {
    public boolean wordBreak(String s, List<String> wordDict) {
        int len = s.length();
        if(len == 0) return false;
        Set<String> set = new HashSet<String>();
        set.addAll(wordDict);
        int[][] dp = new int[len][len];
        
        for(int l = 1; l<= len; l++){
            for(int i = 0 ; i+l <= len; i++){
                String ss = s.substring(i, i+l);
                
                if(set.contains(ss)){
                    dp[i][i+l-1] = 1;
                }else{
                    int j = i+1;
                    while(j < i+l){
                        if(dp[i][j-1] == 1 && dp[j][i+l-1] == 1){
                            dp[i][i+l-1] = 1;
                            break;
                        }
                        j++;
                    }
                }
            }
        }
        
        return dp[0][len-1] == 1;
    }
}
===========================================
Better solution on dp
// by 2guotou 
 public boolean wordBreak(String s, Set<String> wordDict) {
        int len = s.length();
        boolean[] f = new boolean[len+1];
        f[0] = true;
        for (int i=1; i<len+1; i++)
            for (int j=0; j<i; j++)
                if (f[j] && wordDict.contains(s.substring(j,i)))
                {
                    f[i] = true;
                    break;
                }
        return f[len];
    }
