Given an array S of n integers, are there elements a, b, c, and d in S such that a + b + c + d = target? Find all unique quadruplets in the array which gives the sum of target.

Note: The solution set must not contain duplicate quadruplets.

For example, given array S = [1, 0, -1, 0, -2, 2], and target = 0.

A solution set is:
[
  [-1,  0, 0, 1],
  [-2, -1, 1, 2],
  [-2,  0, 0, 2]
]
============codes=============
public class Solution {
    public List<List<Integer>> fourSum(int[] nums, int target) {
        List<List<Integer>> list = new ArrayList<List<Integer>>();
        if(nums.length<4) return list;
        Arrays.sort(nums);
        int length = nums.length;
        for(int i = 0 ; i< length; i++){
        	for(int j = i+1; j < length; j++){
        		int left  = j+1;
        		int right = length-1;
        		while(left<right){
//        			System.out.println(nums[i]+","+nums[j]+","+nums[left]+","+nums[right]);
        			if(target == (nums[i]+nums[j]+nums[left]+nums[right])){
        				List<Integer> ll = new ArrayList<Integer>();
        				ll.add(nums[i]);	ll.add(nums[j]);	ll.add(nums[left]);	ll.add(nums[right]);
            			list.add(ll);
            				
            			while(left+1<length && nums[left] == nums[left+1]){left++;}
                    	while(right-1>= 0 && nums[right] == nums[right-1]){right--;}
                    	left++;		right--;
            			continue;
            		}else if(target > (nums[i]+nums[j]+nums[left]+nums[right])){
            			left++;
            		}else{
            			right--;
            		}
            	}
            	
            	while(j+1<length && nums[j] == nums[j+1]){j++;}
        	}
        	while(i+1<length && nums[i] == nums[i+1]){
        		i++;
        	}
        }
        // for(List<Integer> l1 :list){
        // 	for(int i : l1){
        // 		System.out.print(i+",");
        // 	}
        // 	System.out.println();
        // }
        return list;
    }
}
