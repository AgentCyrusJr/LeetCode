Given a digit string, return all possible letter combinations that the number could represent.

Input:Digit string "23"
Output: ["ad", "ae", "af", "bd", "be", "bf", "cd", "ce", "cf"].
Note:
Although the above answer is in lexicographical order, your answer could be in any order you want.
==============codes=================
public List<String> letterCombinations(String digits) {
        List<String> list = new ArrayList<String>();
        String[] str = {"","","abc","def","ghi","jkl","mno","pqrs","tuv","wxyz"};
        bp(list, "", 0, digits, str);
        return list;
    }
    
    public void bp(List<String> list, String answer, int index, String digits, String[] str){
        if(index == digits.length()){
            list.add(answer);
            return;
        }
        int digit = Integer.parseInt(digits.charAt(index)+"");
        for(int i = 0 ; i< str[digit].length(); i++){
            answer += ""+str[digit].charAt(i);
            bp(list, answer, index+1, digits, str);
            answer = answer.substring(0, answer.length()-1);
        }
    }
====================2017/10/13========================
class Solution {
    List<String> list = new ArrayList<String>();
    public List<String> letterCombinations(String digits) {
        if(digits.length() == 0) return list;
        String[] str = new String[10];
        str[2] = "abc"; str[3] = "def"; str[4] = "ghi"; str[5] = "jkl"; str[6] = "mno"; str[7] = "pqrs"; str[8] = "tuv"; str[9] = "wxyz"; 
        helper(str, digits, 0, "");
        return list;
    }
    
    public void helper(String[] str, String digits, int start, String current){
        if(start == digits.length()){
            list.add(current);
            return;
        }
        String target = str[digits.charAt(start)-'0'];
        for(int i = 0; i<target.length(); i++){
            current+=target.charAt(i);
            helper(str, digits, start+1, current);
            current = current.substring(0, current.length()-1);
        }
    }
}
