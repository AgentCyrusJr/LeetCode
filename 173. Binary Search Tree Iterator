Implement an iterator over a binary search tree (BST). Your iterator will be initialized with the root node of a BST.

Calling next() will return the next smallest number in the BST.

Note: next() and hasNext() should run in average O(1) time and uses O(h) memory, where h is the height of the tree.
===========codes=============
/**
 * Definition for binary tree
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */

public class BSTIterator {

    List<Integer> list = new ArrayList<Integer>();
    int index;
    public BSTIterator(TreeNode root) {
        list = new ArrayList<Integer>();
        inorder(root);
        index = 0;
    }
    
    public void inorder(TreeNode root){
        if(root!=null){
            inorder(root.left);
            list.add(root.val);
            inorder(root.right);
        }
        
    }
    
    /** @return whether we have a next smallest number */
    public boolean hasNext() {
        return index<list.size();    
    }

    /** @return the next smallest number */
    public int next() {
        return list.get(index++);
    }
}

/**
 * Your BSTIterator will be called like this:
 * BSTIterator i = new BSTIterator(root);
 * while (i.hasNext()) v[f()] = i.next();
 */
