Given a string that contains only digits 0-9 and a target value, return all possibilities to add binary operators (not unary) +, -, or * between the digits so they evaluate to the target value.

Examples: 
"123", 6 -> ["1+2+3", "1*2*3"] 
"232", 8 -> ["2*3+2", "2+3*2"]
"105", 5 -> ["1*0+5","10-5"]
"00", 0 -> ["0+0", "0-0", "0*0"]
==============codes============
//by czonzhu 
public class Solution {
    public List<String> addOperators(String num, int target) {
        List<String> rst = new ArrayList<String>();
        if(num == null || num.length() == 0) return rst;
        helper(rst, "", num, target, 0, 0, 0);
        return rst;
    }
    public void helper(List<String> rst, String path, String num, int target, int pos, long eval, long multed){
        if(pos == num.length()){
            if(target == eval)
                rst.add(path);
            return;
        }
        for(int i = pos; i < num.length(); i++){
            if(i != pos && num.charAt(pos) == '0') break;
            long cur = Long.parseLong(num.substring(pos, i + 1));
            if(pos == 0){
                helper(rst, path + cur, num, target, i + 1, cur, cur);
            }
            else{
                helper(rst, path + "+" + cur, num, target, i + 1, eval + cur , cur);
                
                helper(rst, path + "-" + cur, num, target, i + 1, eval -cur, -cur);
                
                helper(rst, path + "*" + cur, num, target, i + 1, eval - multed + multed * cur, multed * cur );
            }
        }
    }
}
==================Python======================
Explanaion:
This is a typical backtracking problem. The 'position' allows us to select the substring of num, we look through a loop and create a number from 'num', since according to the question, n-digit number is allowed. The number formed('val') will do addition, subtraction and multiply with the previous value('value'). The tricky part is that according to the rules of priority of multiply(1+2*3 != (1+2)*3). We also need to save the value('mValue') for possible multiple operation. An example is given to explain how to form the expression.
1     	+ 		2		*		3   	value-mValue+mValue*val, mValue*val
            	mValue   		val     
1		+		2 = 3(value)

value - mValue = 3 - 2 = 1, which is the value of of the previous result.[Rule of priority of multiply]

When the posistion hits the length of 'num', we compare the result with the target, if matches, store the expression in the 'res' list
========2017/07/31===============
class Solution(object): 
    def __init__(self):
        self.res = []
    
    def helper(self, res, target, num, expression, value, mValue, position):
        # print value
        if position == len(num):
            if value == target:
                self.res.append(expression)
            return 
            
        for i in range(position, len(num)):
            if i != position and num[position] == '0':
                break
            else:
                val = long(num[position:i+1])
                if position == 0:
                    self.helper(res, target, num, num[position:i+1], val, val, i + 1)
                    
                else:
                    self.helper(res, target, num, 
                           expression+'+'+num[position:i+1], value+val, val, i + 1)
                    self.helper(res, target, num, 
                           expression+'-'+num[position:i+1], value-val, -val, i + 1) 
                    self.helper(res, target, num, 
                           expression+'*'+num[position:i+1], value-mValue+mValue*val, mValue*val, i + 1)
            
        
    def addOperators(self, num, target):
        """
        :type num: str
        :type target: int
        :rtype: List[str]
        """
        self.helper(self.res, target, num, "", 0, 0, 0)
        return self.res
        
        
        
        
==================
