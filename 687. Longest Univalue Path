Given a binary tree, find the length of the longest path where each node in the path has the same value. This path may or may not pass through the root.

Note: The length of path between two nodes is represented by the number of edges between them.

Example 1:

Input:

              5
             / \
            4   5
           / \   \
          1   1   5
Output:

2
Example 2:

Input:

              1
             / \
            4   5
           / \   \
          4   4   5
Output:

2
Note: The given binary tree has not more than 10000 nodes. The height of the tree is not more than 1000.
===============codes==============
/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
class Solution {
    int max = 0;
    public int longestUnivaluePath(TreeNode root) {
        if(root == null) return 0;
        helper(root);
        return max-1;
    }
    public int helper(TreeNode root){
        if(root == null) return 0;
        int left = helper(root.left);
        int right = helper(root.right);
        int value = 1;
        if(left != 0 && right == 0){
            if(root.val == root.left.val) value += left;
        }else if(right != 0 && left == 0){
            if(root.val == root.right.val) value += right;
        }else if(left != 0 && right != 0){
            if(root.val == root.left.val && root.val == root.right.val){
                max = Math.max(value + left + right,max);
                value += Math.max(left, right);
            } 
            else if(root.val == root.left.val){
                value += left;
            }else if(root.val == root.right.val){
                value += right;
            }
        }
        max = Math.max(value,max);
        return value;
    }
}
