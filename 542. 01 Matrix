Given a matrix consists of 0 and 1, find the distance of the nearest 0 for each cell.

The distance between two adjacent cells is 1.
Example 1: 
Input:

0 0 0
0 1 0
0 0 0
Output:
0 0 0
0 1 0
0 0 0
Example 2: 
Input:

0 0 0
0 1 0
1 1 1
Output:
0 0 0
0 1 0
1 2 1
Note:
The number of elements of the given matrix will not exceed 10,000.
There are at least one 0 in the given matrix.
The cells are adjacent in only four directions: up, down, left and right.
======================codes=================
//TLE
public class Solution {
    int[][] array;
    public List<List<Integer>> updateMatrix(List<List<Integer>> matrix) {
        List<List<Integer>> list = new ArrayList<List<Integer>>();
        
        int m = matrix.size();
        if(matrix.size() == 0) return list;
        int n = matrix.get(0).size();
        array = new int[m][n];
        for(int i = 0 ; i < m ; i++){
            for(int j = 0 ; j < n; j++){
                array[i][j] = m*n;
            }
        }
        
        for(int i = 0; i < m; i++){
            for(int j = 0; j < n; j++){
                if(matrix.get(i).get(j) == 0){
                    System.out.println(i+" "+j);
                    bfs(i, j, array, 0, new int[m][n]);
                }
            }
        }
        
        for(int i = 0 ; i < m ; i ++){
            List<Integer> l = new ArrayList<Integer>();
            for(int j = 0; j < n; j ++){
                l.add(array[i][j]);
            }
            list.add(l);
        }
        
        return list;
    }
    
    public void bfs(int i , int j , int[][] array, int val, int[][] isVisit){
        if(i < 0 || i >= array.length || j < 0 || j >= array[0].length || isVisit[i][j] == 1) return;
        isVisit[i][j] = 1;
        
        array[i][j] = Math.min(array[i][j], val);
        
        // System.out.println(i + " " + j);
        bfs(i-1, j, array, val+1, isVisit);
        bfs(i+1, j, array, val+1, isVisit);
        bfs(i, j-1, array, val+1, isVisit);
        bfs(i, j+1, array, val+1, isVisit);
        isVisit[i][j] = 0;
        
    }
}

========================
//by shawngao
public class Solution {
    public List<List<Integer>> updateMatrix(List<List<Integer>> matrix) {
        int m = matrix.size();
        int n = matrix.get(0).size();
        
        Queue<int[]> queue = new LinkedList<>();
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                if (matrix.get(i).get(j) == 0) {
                    queue.offer(new int[] {i, j});
                }
                else {
                    matrix.get(i).set(j, Integer.MAX_VALUE);
                }
            }
        }
        
        int[][] dirs = {{-1, 0}, {1, 0}, {0, -1}, {0, 1}};
        
        while (!queue.isEmpty()) {
            int[] cell = queue.poll();
            for (int[] d : dirs) {
                int r = cell[0] + d[0];
                int c = cell[1] + d[1];
                if (r < 0 || r >= m || c < 0 || c >= n || 
                    matrix.get(r).get(c) <= matrix.get(cell[0]).get(cell[1]) + 1) continue;
                queue.add(new int[] {r, c});
                matrix.get(r).set(c, matrix.get(cell[0]).get(cell[1]) + 1);
            }
        }
        
        return matrix;
    }
}
