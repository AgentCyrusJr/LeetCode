Given a string, find the length of the longest substring T that contains at most 2 distinct characters.

For example, Given s = “eceba”,

T is "ece" which its length is 3.
=============codes=========
public class Solution {
    public int lengthOfLongestSubstringTwoDistinct(String s) {
        int p1 = 0, p2 = 1;
        if(s.length() <= 2) return s.length();
        Set<Character> set = new HashSet<Character>();
        char head = s.charAt(p1);
        set.add(head);
        int max = Integer.MIN_VALUE;
        while(p2<s.length()){
            char tail = s.charAt(p2);
            set.add(tail);
            if(set.size() > 2){
                if(p2-p1 > max) max = p2-p1;
                set = new HashSet<Character>();
                p1 = p2-1;
                while(s.charAt(p1-1) == s.charAt(p1)) p1--;
                char newHead = s.charAt(p1);
                set.add(newHead);
                set.add(tail);
            }
            p2++;
        }
        System.out.println(p1+" "+p2);
        
        return p2-p1 > max? p2-p1 : max;
    }
}

another more compact version:

public int lengthOfLongestSubstringTwoDistinct(String s) {
        int[] array = new int[256];
        int max = 0;
        int i = 0, j = 0, num = 0; 
        while(j<s.length()){
            if(array[s.charAt(j++)]++==0) num++;
            if(num > 2){
                while(--array[s.charAt(i++)] > 0);
                num--;
            }
            max = Math.max(max, j-i);
        }
        
        return max;
    }
