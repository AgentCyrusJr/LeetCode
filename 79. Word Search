Given a 2D board and a word, find if the word exists in the grid.

The word can be constructed from letters of sequentially adjacent cell, where "adjacent" cells are those horizontally or vertically neighboring. The same letter cell may not be used more than once.

For example,
Given board =

[
  ['A','B','C','E'],
  ['S','F','C','S'],
  ['A','D','E','E']
]
word = "ABCCED", -> returns true,
word = "SEE", -> returns true,
word = "ABCB", -> returns false.
==============TLE codes================
public class Solution {
    boolean flag = false;
	public boolean exist(char[][] board, String word) {
        if(board.length == 0) return false;
        if(word.length()>board.length*board[0].length) return false;
        int[][] isVisit = new int[board.length][board[0].length];
		for(int i = 0; i<board.length; i++){
        	for(int j = 0; j < board[0].length; j++){
        		if(board[i][j] == word.charAt(0)){
        			if(word.length()==1){
        				return true;
        			}else{
        				bt(isVisit, board, word, 0, i, j);
        				if(flag){
        				    return flag;
        				}
        			}
        		}
        	}
        }
		return flag;
    }
	
	public void bt(int[][] isVisit, char[][] board, String word, int index, int i, int j){
		
		if(isVisit[i][j] == 0){
			isVisit[i][j] =1;
			if(index<word.length()){
				char ch = word.charAt(index);
				if(ch == board[i][j]){
					if(i-1>=0) this.bt(isVisit, board, word, index+1, i-1, j);
					if(i+1<board.length) this.bt(isVisit, board, word, index+1, i+1, j);
					if(j-1>=0) this.bt(isVisit, board, word, index+1, i, j-1);
					if(j+1<board[0].length) this.bt(isVisit, board, word, index+1, i, j+1);	
				}
			}
			isVisit[i][j] =0;
		}
		if(index == word.length()){ 
			flag = true;
			return;
		}
	}
}
===================
//by harish-v 
public class Solution {
    static boolean[][] visited;
    public boolean exist(char[][] board, String word) {
        visited = new boolean[board.length][board[0].length];
        
        for(int i = 0; i < board.length; i++){
            for(int j = 0; j < board[i].length; j++){
                if((word.charAt(0) == board[i][j]) && search(board, word, i, j, 0)){
                    return true;
                }
            }
        }
        
        return false;
    }
    
    private boolean search(char[][]board, String word, int i, int j, int index){
        if(index == word.length()){
            return true;
        }
        
        if(i >= board.length || i < 0 || j >= board[i].length || j < 0 || board[i][j] != word.charAt(index) || visited[i][j]){
            return false;
        }
        
        visited[i][j] = true;
        if(search(board, word, i-1, j, index+1) || 
           search(board, word, i+1, j, index+1) ||
           search(board, word, i, j-1, index+1) || 
           search(board, word, i, j+1, index+1)){
            return true;
        }
        
        visited[i][j] = false;
        return false;
    }
}
