Given a binary tree, find the lowest common ancestor (LCA) of two given nodes in the tree.

According to the definition of LCA on Wikipedia: “The lowest common ancestor is defined between two nodes v and w as the lowest node in T that has both v and w as descendants (where we allow a node to be a descendant of itself).”

        _______3______
       /              \
    ___5__          ___1__
   /      \        /      \
   6      _2       0       8
         /  \
         7   4
For example, the lowest common ancestor (LCA) of nodes 5 and 1 is 3. Another example is LCA of nodes 5 and 4 is 5, since a node can be a descendant of itself according to the LCA definition.
==============codes=============
// by StefanPochmann
public TreeNode lowestCommonAncestor(TreeNode root, TreeNode p, TreeNode q) {
    if (root == null || root == p || root == q) return root;
    TreeNode left = lowestCommonAncestor(root.left, p, q);
    TreeNode right = lowestCommonAncestor(root.right, p, q);
    return left == null ? right : right == null ? left : root;
}

// by lotuseater 
public TreeNode lowestCommonAncestor(TreeNode root, TreeNode p, TreeNode q) {
    LinkedList<TreeNode> pl = new LinkedList<TreeNode>();
    LinkedList<TreeNode> ql = new LinkedList<TreeNode>();
    findPath(root, p, pl);
    findPath(root, q, ql);
    //find first intersection node
    LinkedList<TreeNode> longPath = pl.size() > ql.size() ? pl : ql;
    int diff = Math.abs(pl.size() - ql.size());
    for (int i = 0; i < diff; i++) {
        longPath.removeFirst();
    }
    while (pl.peek() != ql.peek()) {
        pl.removeFirst();
        ql.removeFirst();
    }
    return pl.peek();
}

public boolean findPath(TreeNode root, TreeNode n, LinkedList<TreeNode> list) {
    if (root == null) {
        return false;
    }
    
    if (root == n || findPath(root.left, n, list) || findPath(root.right, n, list)) {
        list.addLast(root);
        return true;
    }
    return false;
}
