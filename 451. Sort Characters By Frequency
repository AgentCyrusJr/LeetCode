Given a string, sort it in decreasing order based on the frequency of characters.

Example 1:

Input:
"tree"

Output:
"eert"

Explanation:
'e' appears twice while 'r' and 't' both appear once.
So 'e' must appear before both 'r' and 't'. Therefore "eetr" is also a valid answer.
Example 2:

Input:
"cccaaa"

Output:
"cccaaa"

Explanation:
Both 'c' and 'a' appear three times, so "aaaccc" is also a valid answer.
Note that "cacaca" is incorrect, as the same characters must be together.
Example 3:

Input:
"Aabb"

Output:
"bbAa"

Explanation:
"bbaA" is also a valid answer, but "Aabb" is incorrect.
Note that 'A' and 'a' are treated as two different characters.
===================codes=================

public class Solution {
    public String frequencySort(String s) {
        HashMap<Character, Integer> map = new HashMap<Character, Integer>();
    	StringBuilder sb = new StringBuilder();
        for(char c : s.toCharArray()){
        	int count = map.getOrDefault(c, 0)+1;
        	map.put(c, count);
        }
    	int max = Integer.MIN_VALUE;
    	for(int i= 0; i < map.keySet().size(); i++){
    		char cc_max = '0';
    		for(char c : map.keySet()){
        		int count = map.get(c);
        		if(count>max){
        			max = count;
        			cc_max = c;  
        		}
        	}
    		for(int j= 0; j < max; j++ ){
    			sb.append(cc_max+"");
    		}
    		map.put(cc_max, 0);
    		max=Integer.MIN_VALUE;
    	}
    	
    	
    	return sb.toString();
    }
}


================
//O(n)
//by Hx2 
public class Solution {
    public String frequencySort(String s) {
        int[] freq = new int [256];
        for (char ch: s.toCharArray()) freq[ch]++;
        //here the Integer represents the frequency of the Character
        TreeMap<Integer, List<Character>> tree = new TreeMap<Integer, List<Character>>();
        for (int i=0; i<freq.length; i++) {
            if (freq[i] > 0) {
                if (!tree.containsKey(freq[i])) {
                    tree.put(freq[i], new LinkedList<Character>());
                }
                tree.get(freq[i]).add((char)i);
            }
        }
        StringBuilder sb = new StringBuilder();
        while(tree.size() > 0) {
        //poll the last entry of the map. which has the greatest value(greatest frequency)
            Map.Entry<Integer, List<Character>> entry = tree.pollLastEntry();
            for (Character ch: entry.getValue()) {
                sb.append(new String(new char[entry.getKey()]).replace('\0', ch));
            }
        }
        return sb.toString();
    }
}
