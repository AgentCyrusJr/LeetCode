You are given n pairs of numbers. In every pair, the first number is always smaller than the second number.

Now, we define a pair (c, d) can follow another pair (a, b) if and only if b < c. Chain of pairs can be formed in this fashion.

Given a set of pairs, find the length longest chain which can be formed. You needn't use up all the given pairs. You can select pairs in any order.

Example 1:
Input: [[1,2], [2,3], [3,4]]
Output: 2
Explanation: The longest chain is [1,2] -> [3,4]
Note:
The number of given pairs will be in the range [1, 1000].
=================codes==============
class Solution {
    public int findLongestChain(int[][] pairs) {
        
        Arrays.sort(pairs, new Comparator<int[]>() {
            public int compare(int[] o1, int[] o2) {
                // Intentional: Reverse order for this demo
                return o1[0]-o2[0];
            }
        });
        int len = pairs.length;
        int[][] dp = new int[len][len];
        for (int[] row: dp)
            Arrays.fill(row, 1);
        int max = 1;
        
        for(int i = 0; i < len; i++){
            for(int j = 0 ; j < len; j++){
                if(i == j) continue;
                if(pairs[j][1] < pairs[i][0]){
                    dp[i][i] = dp[j][j] + 1;
                    max = Math.max(max, dp[i][i]);
                }
                
            }
        }
        return max;
    }
}
