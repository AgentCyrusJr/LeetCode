Given a binary search tree with non-negative values, find the minimum absolute difference between values of any two nodes.

Example:

Input:

   1
    \
     3
    /
   2

Output:
1

Explanation:
The minimum absolute difference is 1, which is the difference between 2 and 1 (or between 2 and 3).
Note: There are at least two nodes in this BST.
================codes==============
public class Solution {
    int min = Integer.MAX_VALUE;
    public int getMinimumDifference(TreeNode root) {
        ArrayList<Integer> list = new ArrayList<Integer>();
        preorder(root, list);
        int diff = 0;
        for(int i = 0 ; i+1<list.size(); i++){
            diff = Math.abs(list.get(i)-list.get(i+1));
            if (diff<min) min = diff;
        }
        return min;
    }
    public void preorder(TreeNode root, ArrayList<Integer> list){
        if(root != null){
            preorder(root.left, list);
            
            list.add(root.val);
            preorder(root.right, list);
        }
        
    }
}
