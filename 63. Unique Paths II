Follow up for "Unique Paths":

Now consider if some obstacles are added to the grids. How many unique paths would there be?

An obstacle and empty space is marked as 1 and 0 respectively in the grid.

For example,
There is one obstacle in the middle of a 3x3 grid as illustrated below.

[
  [0,0,0],
  [0,1,0],
  [0,0,0]
]
The total number of unique paths is 2.
==================codes================
public class Solution {
    public int uniquePathsWithObstacles(int[][] obstacleGrid) {
        int m = obstacleGrid.length;
        int n = obstacleGrid[0].length;
        if(obstacleGrid[0][0]==1){
            return 0;
        }
		for(int i = 0; i < m; i++){
			for(int j = 0 ; j< n; j++){
				if(obstacleGrid[i][j]==0){
					obstacleGrid[i][j]=1;
				}else
					obstacleGrid[i][j]=0;
			}
        }
		for(int i = 0; i < m; i++){
			for(int j = 0 ; j< n; j++){
				
					
				    if(i==0 && j==0){
				        continue;    
				    }
				    else if(i==0){
						    if(obstacleGrid[i][j]!=0){
						        obstacleGrid[i][j] = obstacleGrid[i][j-1];
						    }else{
						        obstacleGrid[i][j]=0;
						    }
							
						
					}else if(j ==0){
						    if(obstacleGrid[i][j]!=0){
						        obstacleGrid[i][j] = obstacleGrid[i-1][j];
						    }else{
						        obstacleGrid[i][j]=0;
						    }
						
					}else{
						if((obstacleGrid[i][j-1]!=0 || obstacleGrid[i-1][j]!=0) && obstacleGrid[i][j]!=0){
							obstacleGrid[i][j] = obstacleGrid[i][j-1] + obstacleGrid[i-1][j];
						}else{
						    obstacleGrid[i][j]=0;
						}
					}
				
			}
		}
		return obstacleGrid[m-1][n-1];
    }
}

================
by tusizi
public int uniquePathsWithObstacles(int[][] obstacleGrid) {
    int width = obstacleGrid[0].length;
    int[] dp = new int[width];
    dp[0] = 1;
    for (int[] row : obstacleGrid) {
        for (int j = 0; j < width; j++) {
            if (row[j] == 1)
                dp[j] = 0;
            else if (j > 0)
                dp[j] += dp[j - 1];
        }
    }
    return dp[width - 1];
}
