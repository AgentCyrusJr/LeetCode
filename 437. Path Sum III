You are given a binary tree in which each node contains an integer value.

Find the number of paths that sum to a given value.

The path does not need to start or end at the root or a leaf, but it must go downwards (traveling only from parent nodes to child nodes).

The tree has no more than 1,000 nodes and the values are in the range -1,000,000 to 1,000,000.

Example:

root = [10,5,-3,3,2,null,11,3,-2,null,1], sum = 8

      10
     /  \
    5   -3
   / \    \
  3   2   11
 / \   \
3  -2   1

Return 3. The paths that sum to 8 are:

1.  5 -> 3
2.  5 -> 2 -> 1
3. -3 -> 11
===================codes===============
/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
public class Solution {
    int res = 0;
	int total_sum = 0;
	public int pathSum(TreeNode root, int sum) {
	    if(root == null) return 0;
        this.dfs(root, sum);
        return res;
    }
	
	public void dfs(TreeNode root, int sum){
		this.searchPath(root, sum, total_sum);
		if(root.left != null){
			total_sum = 0;
			this.dfs(root.left, sum);
		}
		if(root.right != null){
			total_sum = 0;
			this.dfs(root.right, sum);
		}
	}
	
	public void searchPath(TreeNode root, int sum, int total_sum){
		
		total_sum += root.val;
		if(total_sum == sum) res++;
		
		if(root.left!=null){
			this.searchPath(root.left, sum, total_sum);
		}
		if(root.right!=null){
			this.searchPath(root.right, sum, total_sum);
		}	
	}
}
