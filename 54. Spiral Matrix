Given a matrix of m x n elements (m rows, n columns), return all elements of the matrix in spiral order.

For example,
Given the following matrix:

[
 [ 1, 2, 3 ],
 [ 4, 5, 6 ],
 [ 7, 8, 9 ]
]
You should return [1,2,3,6,9,8,7,4,5].
=============================================
Four pointers checking the boundary

Time: O(MN) M,N is the size of matrix
Space: O(1)   -> 4 pointers
===================code======================
class Solution {
    public List<Integer> spiralOrder(int[][] matrix) {
        List<Integer> list = new ArrayList<>();
        if(matrix.length == 0) return list;
        
        int row_start = 0, row_end = matrix.length-1, col_start = 0, col_end = matrix[0].length-1;
        
        while(row_start <= row_end && col_start <= col_end){
            for(int i = col_start; i <= col_end; i++){
                list.add(matrix[row_start][i]);
            }
            row_start++;
            
            for(int i = row_start; i <= row_end; i++){
                list.add(matrix[i][col_end]);
            }
            col_end--;
            
            if(row_start <= row_end){
                for(int i = col_end; i >= col_start; i--){
                    list.add(matrix[row_end][i]);
                }
                row_end--;
            }
            
            if(col_start <= col_end){
                for(int i = row_end; i >= row_start; i--){
                    list.add(matrix[i][col_start]);
                }
                col_start++;
            }
        }
        
        return list;
    }
}
