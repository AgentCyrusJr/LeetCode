Return the number of permutations of 1 to n so that prime numbers are at prime indices (1-indexed.)

(Recall that an integer is prime if and only if it is greater than 1, and cannot be written as a product of two positive integers both smaller than it.)

Since the answer may be large, return the answer modulo 10^9 + 7.

 

Example 1:

Input: n = 5
Output: 12
Explanation: For example [1,2,5,4,3] is a valid permutation, but [5,2,3,4,1] is not because the prime number 5 is at index 1.
Example 2:

Input: n = 100
Output: 682289015
 

Constraints:

1 <= n <= 100
===========================================================
Maths problem

count the number of prime and non-primes number within [1,n]
factorial(x)*factorial(y), where x+y = n

Time: O(N)
Space: O(N)
===========================code============================
class Solution {
    public int numPrimeArrangements(int n) {
        if(n == 1) return 1;
        int[] isPrimes = new int[n+1];
        Arrays.fill(isPrimes, 1);
        
        int i = 2;
        while(i*i <= n){
            if(isPrimes[i] == 1){
               for(int j = 2; i*j <= n; j++){
                    isPrimes[i*j] = 0;
                } 
            }
            i++;
        }
        
        int count_primes = 0;
        for(int k = 2; k <= n; k++){
            if(isPrimes[k] == 1){
                count_primes++;
            }
        }
        
        int count_composite = n - count_primes;
        
        return (int)(fn(count_composite)*fn(count_primes)%(1000000007));
    }
    
    public long fn(long n){
        if(n == 1){
            return 1;
        }
        
        return n*fn(n-1)%(1000000007);
    }
}
